<parties>
  <screen title="Parties">
    <p class="mt1 mb3 i">The contract can have two or more parties.</p>

    <frame-box
      each={ (party, index) in parties }
      remove="Remove Party"
      onRemove={parties.length > 2 ? deleteParty(index) : null} >
      <label>
        <span class="b mr1">Full Name</span>
        <input type="text" placeholder="e.g. The Big Bank" data-i={index} data-key="name" onchange={updateParty} value={party.name} />
      </label>

      <label class="mt2">
        <span class="b mr1">Identifier</span>
        <input type="text" placeholder="e.g. TBB" data-i={index} data-key="identifier" onchange={updateParty} value={party.identifier} />
      </label>
    </frame-box>

    <div class="mv3 pa3 ba b--black-20">
      <button class="center db bg-green br1 pv2 ph3" onclick={addParty}>Add Party</button>
    </div>

    <div class="flex items-center justify-end" if={canNext}>
      <button class="bg-blue br1 pv2 ph3" onclick={submit}>Next</button>
    </div>
  </screen>

  <script>
    import FrameBox from '../../frame-box/frame-box.riot'
    import Screen from '../screen/screen.riot'
    import Date from '../../primitives/date/date.riot'

    const newParty = () => ({
      name: '',
      identifier: ''
    })

    export default {
      components: {
        Screen,
        Date,
        FrameBox
      },
      get parties () {
        const parties = this.props.value
        if (Array.isArray(parties)) {
          if (parties.length >= 2) return parties
          else if (parties.length >= 1) return [...parties, newParty()]
        }

        return [
          newParty(),
          newParty()
        ]
      },
      addParty () {
        this.props.onValue([...this.parties, newParty()])
      },
      updateParty (event) {
        const i = event.target.dataset.i
        const key = event.target.dataset.key
        const parties = this.parties
        parties[i][key] = event.target.value
        this.props.onValue(parties)
      },
      deleteParty (index) {
        return () => {
          const parties = this.parties
          parties.splice(index, 1)
          this.props.onValue(parties)
        } 
      },
      get canNext () {
        return this.parties.reduce((valid, { name, identifier }) => name && identifier && valid, true)
      },
      submit () {
        this.props.onDone()
      }
    }
  </script>
</parties>
