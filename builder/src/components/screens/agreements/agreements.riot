<agreements>
  <screen title="Agreements">
    <p class="mt1 i">A contract can have one or more agreements.</p>

    <div each={ (agreement, index) in agreements }>
      <bond-purchase
        if={agreement.bondPurchase}
        parties={props.parties}
        agreement={agreement}
        onRemove={onRemoveAgreement(index)}
        onChange={onAgreement(index)} />

      <interest-rate-swap
        if={agreement.interestRateSwap}
        parties={props.parties}
        agreement={agreement}
        onRemove={onRemoveAgreement(index)}
        onChange={onAgreement(index)} />

      <currency-swap
        if={agreement.currencySwap}
        parties={props.parties}
        agreement={agreement}
        onRemove={onRemoveAgreement(index)}
        onChange={onAgreement(index)} />
    </div>

    <div class="mv3 pa3 relative ba b--black-20" onchange={onAgreementType}>
      <p class="b mt0 mb3">Agreement Type</p>
      <div each={ (key) in types } class="mt2">
        <input type="radio" class="mr1" value={key.id} checked={state.type === key.id} name="agreementType" /> {key.title}
      </div>

      <button class="center db bg-green br1 pv2 ph3" onclick={addAgreement}>Add Agreement</button>
    </div>

    <div class="flex items-center justify-end" if={canNext}>
      <button class="bg-blue br1 pv2 ph3" onclick={submit}>Next</button>
    </div>
  </screen>

  <script>
    import Screen from '../screen/screen.riot'
    import BondPurchase from '../../agreements/bond-purchase/bond-purchase.riot'
    import InterestRateSwap from '../../agreements/interest-rate-swap/interest-rate-swap.riot'
    import CurrencySwap from '../../agreements/currency-swap/currency-swap.riot'

    const newParty = () => ({
      name: '',
      identifier: ''
    })

    export default {
      types: [
        { id: 'bondPurchase', title: 'Bond Purchase' },
        { id: 'interestRateSwap', title: 'Interest Rate Swap' },
        { id: 'currencySwap', title: 'Currency Swap' }
      ],
      state: {
        type: '',
      },
      components: {
        Screen,
        BondPurchase,
        InterestRateSwap,
        CurrencySwap
      },
      get agreements () {
        return this.props.agreements || []
      },
      onAgreement (index) {
        return (agreement) => {
          const agreements = this.agreements
          agreements[index] = agreement
          this.props.onAgreements(agreements)
        }
      },
      onRemoveAgreement (index) {
        return () => {
          const agreements = this.agreements
          agreements.splice(index, 1)
          this.props.onAgreements(agreements)
        }
      },
      onAgreementType (event) {
        this.update({ type: event.target.value })
      },
      addAgreement () {
        this.props.onAgreements([
          ...this.agreements,
          { [this.state.type]: {} }
        ])
      },
      get canNext () {
        return this.agreements.length >= 1
      },
      submit () {
        this.props.onAgreementsDone()
      }
    }
  </script>
</agreements>
