<parties>
  <part title="Parties and Signature">
    <p class="mt1 mb3 i">The contract can have two or more parties.</p>

    <div each={ (party, index) in state.parties } class="party mv3 pa3 relative ba b--black-20">
      <label>
        <span class="b mr1">Full Name</span>
        <input type="text" placeholder="e.g. The Big Bank" data-i={index} data-key="name" onchange={updateParty} value={party.name} />
      </label>

      <label class="mt2">
        <span class="b mr1">Identifier</span>
        <input type="text" placeholder="e.g. TBB" data-i={index} data-key="identifier" onchange={updateParty} value={party.identifier} />
      </label>

      <button
        if={state.parties.length > 2}
        data-i={index}
        onclick={deleteParty}
        title="Remove Party"
        alt="Remove Party"
        class="bg-red br-100 w2 h2">X</button>
    </div>

    <div class="mv3 pa3 ba b--black-20">
      <button class="center db bg-green br1 pv2 ph3" onclick={addParty}>Add Party</button>
    </div>

    <div class="mv3 pa3 ba b--black-20">
      <p class="mv0 b">Signed on: <input type="date" class="ml1" onchange={updateDate} value={state.date}/></p>
    </div>

    <div class="flex items-center justify-end" if={canNext}>
      <button class="bg-blue br1 pv2 ph3" onclick={submit}>Next</button>
    </div>
  </part>

  <script>
    import Part from '../part/part.riot'

    const newParty = () => ({
      name: '',
      identifier: ''
    })

    export default {
      state: {
        parties: [
          newParty(),
          newParty()
        ],
        date: ''
      },
      components: {
        Part
      },
      addParty () {
        this.update({
          parties: [...this.state.parties, newParty()]
        })
      },
      updateParty (event) {
        const i = event.target.dataset.i
        const key = event.target.dataset.key
        const parties = [...this.state.parties]
        parties[i][key] = event.target.value
        this.update({ parties })
      },
      deleteParty (event) {
        const i = event.target.dataset.i
        const parties = [...this.state.parties]
        parties.splice(i, 1)
        this.update({ parties })
      },
      updateDate (event) {
        console.log(event.target.value)
        this.update({ date: event.target.value })
      },
      get canNext () {
        return this.state.date &&
          this.state.parties.reduce((valid, { name, identifier }) => name && identifier && valid, true)
      },
      submit () {
        const parties = this.state.parties
        const date = `${this.state.date}T00:00:00Z`
        this.props.onPartiesSig(parties, date)
      }
    }
  </script>
</parties>