<parties>
  <part title="Parties and Signature">
    <p class="mt1 mb3 i">The contract can have two or more parties.</p>

    <div each={ (party, index) in parties } class="party mv3 pa3 relative ba b--black-20">
      <label>
        <span class="b mr1">Full Name</span>
        <input type="text" placeholder="e.g. The Big Bank" data-i={index} data-key="name" onchange={updateParty} value={party.name} />
      </label>

      <label class="mt2">
        <span class="b mr1">Identifier</span>
        <input type="text" placeholder="e.g. TBB" data-i={index} data-key="identifier" onchange={updateParty} value={party.identifier} />
      </label>

      <button
        if={parties.length > 2}
        data-i={index}
        onclick={deleteParty}
        title="Remove Party"
        alt="Remove Party"
        class="bg-red br-100 w2 h2">X</button>
    </div>

    <div class="mv3 pa3 ba b--black-20">
      <button class="center db bg-green br1 pv2 ph3" onclick={addParty}>Add Party</button>
    </div>

    <div class="mv3 pa3 ba b--black-20">
      <p class="mv0 b">Signed on: <date class="ml1" value={props.signedOn} onDate={updateSignedOn} /> </p>
    </div>

    <div class="flex items-center justify-end" if={canNext}>
      <button class="bg-blue br1 pv2 ph3" onclick={submit}>Next</button>
    </div>
  </part>

  <script>
    import Part from '../part/part.riot'
    import Date from '../date/date.riot'

    const newParty = () => ({
      name: '',
      identifier: ''
    })

    export default {
      components: {
        Part,
        Date
      },
      get parties () {
        const parties = this.props.parties
        if (Array.isArray(parties)) {
          if (parties.length >= 2) return parties
          else if (parties.length >= 1) return [...parties, newParty()]
        }

        return [
          newParty(),
          newParty()
        ]
      },
      addParty () {
        this.props.onParties([...this.parties, newParty()])
      },
      updateParty (event) {
        const i = event.target.dataset.i
        const key = event.target.dataset.key
        const parties = this.parties
        parties[i][key] = event.target.value
        this.props.onParties(parties)
      },
      deleteParty (event) {
        const i = event.target.dataset.i
        const parties = this.parties
        parties.splice(i, 1)
        this.props.onParties(parties)
      },
      updateSignedOn (date) {
        this.props.onSignedOn(date)
      },
      get canNext () {
        return this.props.signedOn &&
          this.props.parties &&
          this.props.parties.reduce((valid, { name, identifier }) => name && identifier && valid, true)
      },
      submit () {
        this.props.onPartiesSigDone()
      }
    }
  </script>
</parties>