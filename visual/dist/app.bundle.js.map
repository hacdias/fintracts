{"version":3,"file":"app.bundle.js","mappings":"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","sources":["webpack://fintracts-visual/./node_modules/@riotjs/hot-reload/index.js","webpack://fintracts-visual/./src/components/global/my-component/my-component.riot","webpack://fintracts-visual/./src/components/global/sidebar/sidebar.riot","webpack://fintracts-visual/./src/components/includes/user/user.riot","webpack://fintracts-visual/./node_modules/bianco.query/index.next.js","webpack://fintracts-visual/./node_modules/bianco.dom-to-array/index.next.js","webpack://fintracts-visual/./node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js","webpack://fintracts-visual/./node_modules/mini-css-extract-plugin/dist/hmr/normalize-url.js","webpack://fintracts-visual/./node_modules/tachyons/css/tachyons.css?f775","webpack://fintracts-visual/./src/style.css?e320","webpack://fintracts-visual/./node_modules/riot/riot.esm.js","webpack://fintracts-visual//Users/henriquedias/Code/hacdias/fintracts/visual/src/components/global|sync|/[a-zA-Z0-9-]+\\.riot/","webpack://fintracts-visual/./src/register-global-components.js","webpack://fintracts-visual/./src/index.js"],"sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('riot'), require('bianco.query')) :\n  typeof define === 'function' && define.amd ? define(['exports', 'riot', 'bianco.query'], factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.riotHotReload = {}, global.riot, global.$));\n}(this, (function (exports, riot, $) { 'use strict';\n\n  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\n  var $__default = /*#__PURE__*/_interopDefaultLegacy($);\n\n  const { cssManager } = riot.__;\n  const { DOM_COMPONENT_INSTANCE_PROPERTY } = riot.__.globals;\n\n  function reload(componentAPI) {\n    const {name} = componentAPI;\n\n    if (!name) {\n      console.warn('Anonymous components can not be reloaded'); // eslint-disable-line\n      return []\n    }\n\n    return $__default['default'](`${name}, [is=${name}]`).map(el => {\n      const oldTag = el[DOM_COMPONENT_INSTANCE_PROPERTY];\n\n      // early return in case there is no riot instance found\n      if (!oldTag) return\n\n      // remove the tag template from the DOM\n      oldTag.unmount(true);\n      // delete the old css from the css manager\n      cssManager.remove(name);\n\n      // create the new tag\n      const newTag = riot.component(componentAPI)(el, oldTag.props);\n      newTag.update(oldTag.state);\n\n      return newTag\n    })\n  }\n\n  exports.default = reload;\n  exports.reload = reload;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n","<my-component>\n  <p>{ props.message }</p>\n</my-component>\n","<sidebar>\n  <div>\n    <div class=\"row\">\n      <h1>Sidebar</h1>\n    </div>\n    <div if={state.showUser} class=\"row\">\n      <user name={ state.name }/>\n    </div>\n\n    <div class=\"row\">\n      <button onclick={toggleUser}>Toggle username</button>\n    </div>\n  </div>\n\n  <script>\n    import User from '../../includes/user/user.riot'\n\n    export default {\n      components: {\n        User\n      },\n      state: {\n        name: 'John',\n        showUser: false\n      },\n      toggleUser() {\n        this.update({\n          showUser: !this.state.showUser\n        })\n      }\n    }\n  </script>\n</sidebar>","<user>\n  <p>My username is: <b>{ props.name }</b></p>\n</user>","import domToArray from 'bianco.dom-to-array'\n\n/**\n * Simple helper to find DOM nodes returning them as array like loopable object\n * @param   { string|DOMNodeList } selector - either the query or the DOM nodes to arraify\n * @param   { HTMLElement }        ctx      - context defining where the query will search for the DOM nodes\n * @returns { Array } DOM nodes found as array\n */\nexport default function $(selector, ctx) {\n  return domToArray(typeof selector === 'string' ?\n    (ctx || document).querySelectorAll(selector) :\n    selector\n  )\n}\n","/**\n * Converts any DOM node/s to a loopable array\n * @param   { HTMLElement|NodeList } els - single html element or a node list\n * @returns { Array } always a loopable object\n */\nexport default function domToArray(els) {\n  // can this object be already looped?\n  if (!Array.isArray(els)) {\n    // is it a node list?\n    if (\n      /^\\[object (HTMLCollection|NodeList|Object)\\]$/\n        .test(Object.prototype.toString.call(els))\n        && typeof els.length === 'number'\n    )\n      return Array.from(els)\n    else\n      // if it's a single node\n      // it will be returned as \"array\" with one single entry\n      return [els]\n  }\n  // this object could be looped out of the box\n  return els\n}","\"use strict\";\n\n/* eslint-env browser */\n\n/*\n  eslint-disable\n  no-console,\n  func-names\n*/\nvar normalizeUrl = require(\"./normalize-url\");\n\nvar srcByModuleId = Object.create(null);\nvar noDocument = typeof document === \"undefined\";\nvar forEach = Array.prototype.forEach;\n\nfunction debounce(fn, time) {\n  var timeout = 0;\n  return function () {\n    var self = this; // eslint-disable-next-line prefer-rest-params\n\n    var args = arguments;\n\n    var functionCall = function functionCall() {\n      return fn.apply(self, args);\n    };\n\n    clearTimeout(timeout);\n    timeout = setTimeout(functionCall, time);\n  };\n}\n\nfunction noop() {}\n\nfunction getCurrentScriptUrl(moduleId) {\n  var src = srcByModuleId[moduleId];\n\n  if (!src) {\n    if (document.currentScript) {\n      src = document.currentScript.src;\n    } else {\n      var scripts = document.getElementsByTagName(\"script\");\n      var lastScriptTag = scripts[scripts.length - 1];\n\n      if (lastScriptTag) {\n        src = lastScriptTag.src;\n      }\n    }\n\n    srcByModuleId[moduleId] = src;\n  }\n\n  return function (fileMap) {\n    if (!src) {\n      return null;\n    }\n\n    var splitResult = src.split(/([^\\\\/]+)\\.js$/);\n    var filename = splitResult && splitResult[1];\n\n    if (!filename) {\n      return [src.replace(\".js\", \".css\")];\n    }\n\n    if (!fileMap) {\n      return [src.replace(\".js\", \".css\")];\n    }\n\n    return fileMap.split(\",\").map(function (mapRule) {\n      var reg = new RegExp(\"\".concat(filename, \"\\\\.js$\"), \"g\");\n      return normalizeUrl(src.replace(reg, \"\".concat(mapRule.replace(/{fileName}/g, filename), \".css\")));\n    });\n  };\n}\n\nfunction updateCss(el, url) {\n  if (!url) {\n    if (!el.href) {\n      return;\n    } // eslint-disable-next-line\n\n\n    url = el.href.split(\"?\")[0];\n  }\n\n  if (!isUrlRequest(url)) {\n    return;\n  }\n\n  if (el.isLoaded === false) {\n    // We seem to be about to replace a css link that hasn't loaded yet.\n    // We're probably changing the same file more than once.\n    return;\n  }\n\n  if (!url || !(url.indexOf(\".css\") > -1)) {\n    return;\n  } // eslint-disable-next-line no-param-reassign\n\n\n  el.visited = true;\n  var newEl = el.cloneNode();\n  newEl.isLoaded = false;\n  newEl.addEventListener(\"load\", function () {\n    if (newEl.isLoaded) {\n      return;\n    }\n\n    newEl.isLoaded = true;\n    el.parentNode.removeChild(el);\n  });\n  newEl.addEventListener(\"error\", function () {\n    if (newEl.isLoaded) {\n      return;\n    }\n\n    newEl.isLoaded = true;\n    el.parentNode.removeChild(el);\n  });\n  newEl.href = \"\".concat(url, \"?\").concat(Date.now());\n\n  if (el.nextSibling) {\n    el.parentNode.insertBefore(newEl, el.nextSibling);\n  } else {\n    el.parentNode.appendChild(newEl);\n  }\n}\n\nfunction getReloadUrl(href, src) {\n  var ret; // eslint-disable-next-line no-param-reassign\n\n  href = normalizeUrl(href, {\n    stripWWW: false\n  }); // eslint-disable-next-line array-callback-return\n\n  src.some(function (url) {\n    if (href.indexOf(src) > -1) {\n      ret = url;\n    }\n  });\n  return ret;\n}\n\nfunction reloadStyle(src) {\n  if (!src) {\n    return false;\n  }\n\n  var elements = document.querySelectorAll(\"link\");\n  var loaded = false;\n  forEach.call(elements, function (el) {\n    if (!el.href) {\n      return;\n    }\n\n    var url = getReloadUrl(el.href, src);\n\n    if (!isUrlRequest(url)) {\n      return;\n    }\n\n    if (el.visited === true) {\n      return;\n    }\n\n    if (url) {\n      updateCss(el, url);\n      loaded = true;\n    }\n  });\n  return loaded;\n}\n\nfunction reloadAll() {\n  var elements = document.querySelectorAll(\"link\");\n  forEach.call(elements, function (el) {\n    if (el.visited === true) {\n      return;\n    }\n\n    updateCss(el);\n  });\n}\n\nfunction isUrlRequest(url) {\n  // An URL is not an request if\n  // It is not http or https\n  if (!/^https?:/i.test(url)) {\n    return false;\n  }\n\n  return true;\n}\n\nmodule.exports = function (moduleId, options) {\n  if (noDocument) {\n    console.log(\"no window.document found, will not HMR CSS\");\n    return noop;\n  }\n\n  var getScriptSrc = getCurrentScriptUrl(moduleId);\n\n  function update() {\n    var src = getScriptSrc(options.filename);\n    var reloaded = reloadStyle(src);\n\n    if (options.locals) {\n      console.log(\"[HMR] Detected local css modules. Reload all css\");\n      reloadAll();\n      return;\n    }\n\n    if (reloaded) {\n      console.log(\"[HMR] css reload %s\", src.join(\" \"));\n    } else {\n      console.log(\"[HMR] Reload all css\");\n      reloadAll();\n    }\n  }\n\n  return debounce(update, 50);\n};","\"use strict\";\n\n/* eslint-disable */\nfunction normalizeUrl(pathComponents) {\n  return pathComponents.reduce(function (accumulator, item) {\n    switch (item) {\n      case \"..\":\n        accumulator.pop();\n        break;\n\n      case \".\":\n        break;\n\n      default:\n        accumulator.push(item);\n    }\n\n    return accumulator;\n  }, []).join(\"/\");\n}\n\nmodule.exports = function (urlString) {\n  urlString = urlString.trim();\n\n  if (/^data:/i.test(urlString)) {\n    return urlString;\n  }\n\n  var protocol = urlString.indexOf(\"//\") !== -1 ? urlString.split(\"//\")[0] + \"//\" : \"\";\n  var components = urlString.replace(new RegExp(protocol, \"i\"), \"\").split(\"/\");\n  var host = components[0].toLowerCase().replace(/\\.$/, \"\");\n  components[0] = \"\";\n  var path = normalizeUrl(components);\n  return protocol + host + path;\n};","// extracted by mini-css-extract-plugin\nexport {};\n    if(module.hot) {\n      // 1633525520129\n      var cssReload = require(\"/Users/henriquedias/Code/hacdias/fintracts/visual/node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js\")(module.id, {\"locals\":false});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);\n    }\n  ","// extracted by mini-css-extract-plugin\nexport {};\n    if(module.hot) {\n      // 1633525519971\n      var cssReload = require(\"/Users/henriquedias/Code/hacdias/fintracts/visual/node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js\")(module.id, {\"locals\":false});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);\n    }\n  ","/* Riot v6.0.2, @license MIT */\n/**\n * Convert a string from camel case to dash-case\n * @param   {string} string - probably a component tag name\n * @returns {string} component name normalized\n */\nfunction camelToDashCase(string) {\n  return string.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n}\n/**\n * Convert a string containing dashes to camel case\n * @param   {string} string - input string\n * @returns {string} my-string -> myString\n */\n\nfunction dashToCamelCase(string) {\n  return string.replace(/-(\\w)/g, (_, c) => c.toUpperCase());\n}\n\n/**\n * Get all the element attributes as object\n * @param   {HTMLElement} element - DOM node we want to parse\n * @returns {Object} all the attributes found as a key value pairs\n */\n\nfunction DOMattributesToObject(element) {\n  return Array.from(element.attributes).reduce((acc, attribute) => {\n    acc[dashToCamelCase(attribute.name)] = attribute.value;\n    return acc;\n  }, {});\n}\n/**\n * Move all the child nodes from a source tag to another\n * @param   {HTMLElement} source - source node\n * @param   {HTMLElement} target - target node\n * @returns {undefined} it's a void method ¯\\_(ツ)_/¯\n */\n// Ignore this helper because it's needed only for svg tags\n\nfunction moveChildren(source, target) {\n  if (source.firstChild) {\n    target.appendChild(source.firstChild);\n    moveChildren(source, target);\n  }\n}\n/**\n * Remove the child nodes from any DOM node\n * @param   {HTMLElement} node - target node\n * @returns {undefined}\n */\n\nfunction cleanNode(node) {\n  clearChildren(node.childNodes);\n}\n/**\n * Clear multiple children in a node\n * @param   {HTMLElement[]} children - direct children nodes\n * @returns {undefined}\n */\n\nfunction clearChildren(children) {\n  Array.from(children).forEach(removeChild);\n}\n/**\n * Remove a node\n * @param {HTMLElement}node - node to remove\n * @returns {undefined}\n */\n\nconst removeChild = node => node && node.parentNode && node.parentNode.removeChild(node);\n/**\n * Insert before a node\n * @param {HTMLElement} newNode - node to insert\n * @param {HTMLElement} refNode - ref child\n * @returns {undefined}\n */\n\nconst insertBefore = (newNode, refNode) => refNode && refNode.parentNode && refNode.parentNode.insertBefore(newNode, refNode);\n/**\n * Replace a node\n * @param {HTMLElement} newNode - new node to add to the DOM\n * @param {HTMLElement} replaced - node to replace\n * @returns {undefined}\n */\n\nconst replaceChild = (newNode, replaced) => replaced && replaced.parentNode && replaced.parentNode.replaceChild(newNode, replaced);\n\n// Riot.js constants that can be used accross more modules\nconst COMPONENTS_IMPLEMENTATION_MAP$1 = new Map(),\n      DOM_COMPONENT_INSTANCE_PROPERTY$1 = Symbol('riot-component'),\n      PLUGINS_SET$1 = new Set(),\n      IS_DIRECTIVE = 'is',\n      VALUE_ATTRIBUTE = 'value',\n      MOUNT_METHOD_KEY = 'mount',\n      UPDATE_METHOD_KEY = 'update',\n      UNMOUNT_METHOD_KEY = 'unmount',\n      SHOULD_UPDATE_KEY = 'shouldUpdate',\n      ON_BEFORE_MOUNT_KEY = 'onBeforeMount',\n      ON_MOUNTED_KEY = 'onMounted',\n      ON_BEFORE_UPDATE_KEY = 'onBeforeUpdate',\n      ON_UPDATED_KEY = 'onUpdated',\n      ON_BEFORE_UNMOUNT_KEY = 'onBeforeUnmount',\n      ON_UNMOUNTED_KEY = 'onUnmounted',\n      PROPS_KEY = 'props',\n      STATE_KEY = 'state',\n      SLOTS_KEY = 'slots',\n      ROOT_KEY = 'root',\n      IS_PURE_SYMBOL = Symbol('pure'),\n      IS_COMPONENT_UPDATING = Symbol('is_updating'),\n      PARENT_KEY_SYMBOL = Symbol('parent'),\n      ATTRIBUTES_KEY_SYMBOL = Symbol('attributes'),\n      TEMPLATE_KEY_SYMBOL = Symbol('template');\n\nvar globals = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  COMPONENTS_IMPLEMENTATION_MAP: COMPONENTS_IMPLEMENTATION_MAP$1,\n  DOM_COMPONENT_INSTANCE_PROPERTY: DOM_COMPONENT_INSTANCE_PROPERTY$1,\n  PLUGINS_SET: PLUGINS_SET$1,\n  IS_DIRECTIVE: IS_DIRECTIVE,\n  VALUE_ATTRIBUTE: VALUE_ATTRIBUTE,\n  MOUNT_METHOD_KEY: MOUNT_METHOD_KEY,\n  UPDATE_METHOD_KEY: UPDATE_METHOD_KEY,\n  UNMOUNT_METHOD_KEY: UNMOUNT_METHOD_KEY,\n  SHOULD_UPDATE_KEY: SHOULD_UPDATE_KEY,\n  ON_BEFORE_MOUNT_KEY: ON_BEFORE_MOUNT_KEY,\n  ON_MOUNTED_KEY: ON_MOUNTED_KEY,\n  ON_BEFORE_UPDATE_KEY: ON_BEFORE_UPDATE_KEY,\n  ON_UPDATED_KEY: ON_UPDATED_KEY,\n  ON_BEFORE_UNMOUNT_KEY: ON_BEFORE_UNMOUNT_KEY,\n  ON_UNMOUNTED_KEY: ON_UNMOUNTED_KEY,\n  PROPS_KEY: PROPS_KEY,\n  STATE_KEY: STATE_KEY,\n  SLOTS_KEY: SLOTS_KEY,\n  ROOT_KEY: ROOT_KEY,\n  IS_PURE_SYMBOL: IS_PURE_SYMBOL,\n  IS_COMPONENT_UPDATING: IS_COMPONENT_UPDATING,\n  PARENT_KEY_SYMBOL: PARENT_KEY_SYMBOL,\n  ATTRIBUTES_KEY_SYMBOL: ATTRIBUTES_KEY_SYMBOL,\n  TEMPLATE_KEY_SYMBOL: TEMPLATE_KEY_SYMBOL\n});\n\nconst EACH = 0;\nconst IF = 1;\nconst SIMPLE = 2;\nconst TAG = 3;\nconst SLOT = 4;\nvar bindingTypes = {\n  EACH,\n  IF,\n  SIMPLE,\n  TAG,\n  SLOT\n};\n\nconst ATTRIBUTE = 0;\nconst EVENT = 1;\nconst TEXT = 2;\nconst VALUE = 3;\nvar expressionTypes = {\n  ATTRIBUTE,\n  EVENT,\n  TEXT,\n  VALUE\n};\n\nconst HEAD_SYMBOL = Symbol('head');\nconst TAIL_SYMBOL = Symbol('tail');\n\n/**\n * Create the <template> fragments text nodes\n * @return {Object} {{head: Text, tail: Text}}\n */\n\nfunction createHeadTailPlaceholders() {\n  const head = document.createTextNode('');\n  const tail = document.createTextNode('');\n  head[HEAD_SYMBOL] = true;\n  tail[TAIL_SYMBOL] = true;\n  return {\n    head,\n    tail\n  };\n}\n\n/**\n * Create the template meta object in case of <template> fragments\n * @param   {TemplateChunk} componentTemplate - template chunk object\n * @returns {Object} the meta property that will be passed to the mount function of the TemplateChunk\n */\n\nfunction createTemplateMeta(componentTemplate) {\n  const fragment = componentTemplate.dom.cloneNode(true);\n  const {\n    head,\n    tail\n  } = createHeadTailPlaceholders();\n  return {\n    avoidDOMInjection: true,\n    fragment,\n    head,\n    tail,\n    children: [head, ...Array.from(fragment.childNodes), tail]\n  };\n}\n\n/**\n * Helper function to set an immutable property\n * @param   {Object} source - object where the new property will be set\n * @param   {string} key - object key where the new property will be stored\n * @param   {*} value - value of the new property\n * @param   {Object} options - set the propery overriding the default options\n * @returns {Object} - the original object modified\n */\nfunction defineProperty(source, key, value, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  /* eslint-disable fp/no-mutating-methods */\n  Object.defineProperty(source, key, Object.assign({\n    value,\n    enumerable: false,\n    writable: false,\n    configurable: true\n  }, options));\n  /* eslint-enable fp/no-mutating-methods */\n\n  return source;\n}\n/**\n * Define multiple properties on a target object\n * @param   {Object} source - object where the new properties will be set\n * @param   {Object} properties - object containing as key pair the key + value properties\n * @param   {Object} options - set the propery overriding the default options\n * @returns {Object} the original object modified\n */\n\nfunction defineProperties(source, properties, options) {\n  Object.entries(properties).forEach(_ref => {\n    let [key, value] = _ref;\n    defineProperty(source, key, value, options);\n  });\n  return source;\n}\n/**\n * Define default properties if they don't exist on the source object\n * @param   {Object} source - object that will receive the default properties\n * @param   {Object} defaults - object containing additional optional keys\n * @returns {Object} the original object received enhanced\n */\n\nfunction defineDefaults(source, defaults) {\n  Object.entries(defaults).forEach(_ref2 => {\n    let [key, value] = _ref2;\n    if (!source[key]) source[key] = value;\n  });\n  return source;\n}\n\n/**\n * Get the current <template> fragment children located in between the head and tail comments\n * @param {Comment} head - head comment node\n * @param {Comment} tail - tail comment node\n * @return {Array[]} children list of the nodes found in this template fragment\n */\n\nfunction getFragmentChildren(_ref) {\n  let {\n    head,\n    tail\n  } = _ref;\n  const nodes = walkNodes([head], head.nextSibling, n => n === tail, false);\n  nodes.push(tail);\n  return nodes;\n}\n/**\n * Recursive function to walk all the <template> children nodes\n * @param {Array[]} children - children nodes collection\n * @param {ChildNode} node - current node\n * @param {Function} check - exit function check\n * @param {boolean} isFilterActive - filter flag to skip nodes managed by other bindings\n * @returns {Array[]} children list of the nodes found in this template fragment\n */\n\nfunction walkNodes(children, node, check, isFilterActive) {\n  const {\n    nextSibling\n  } = node; // filter tail and head nodes together with all the nodes in between\n  // this is needed only to fix a really ugly edge case https://github.com/riot/riot/issues/2892\n\n  if (!isFilterActive && !node[HEAD_SYMBOL] && !node[TAIL_SYMBOL]) {\n    children.push(node);\n  }\n\n  if (!nextSibling || check(node)) return children;\n  return walkNodes(children, nextSibling, check, // activate the filters to skip nodes between <template> fragments that will be managed by other bindings\n  isFilterActive && !node[TAIL_SYMBOL] || nextSibling[HEAD_SYMBOL]);\n}\n\n/**\n * Quick type checking\n * @param   {*} element - anything\n * @param   {string} type - type definition\n * @returns {boolean} true if the type corresponds\n */\nfunction checkType(element, type) {\n  return typeof element === type;\n}\n/**\n * Check if an element is part of an svg\n * @param   {HTMLElement}  el - element to check\n * @returns {boolean} true if we are in an svg context\n */\n\nfunction isSvg(el) {\n  const owner = el.ownerSVGElement;\n  return !!owner || owner === null;\n}\n/**\n * Check if an element is a template tag\n * @param   {HTMLElement}  el - element to check\n * @returns {boolean} true if it's a <template>\n */\n\nfunction isTemplate(el) {\n  return el.tagName.toLowerCase() === 'template';\n}\n/**\n * Check that will be passed if its argument is a function\n * @param   {*} value - value to check\n * @returns {boolean} - true if the value is a function\n */\n\nfunction isFunction(value) {\n  return checkType(value, 'function');\n}\n/**\n * Check if a value is a Boolean\n * @param   {*}  value - anything\n * @returns {boolean} true only for the value is a boolean\n */\n\nfunction isBoolean(value) {\n  return checkType(value, 'boolean');\n}\n/**\n * Check if a value is an Object\n * @param   {*}  value - anything\n * @returns {boolean} true only for the value is an object\n */\n\nfunction isObject(value) {\n  return !isNil(value) && value.constructor === Object;\n}\n/**\n * Check if a value is null or undefined\n * @param   {*}  value - anything\n * @returns {boolean} true only for the 'undefined' and 'null' types\n */\n\nfunction isNil(value) {\n  return value === null || value === undefined;\n}\n\n/**\n * ISC License\n *\n * Copyright (c) 2020, Andrea Giammarchi, @WebReflection\n *\n * Permission to use, copy, modify, and/or distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n * AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE\n * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n * PERFORMANCE OF THIS SOFTWARE.\n */\n// fork of https://github.com/WebReflection/udomdiff version 1.1.0\n// due to https://github.com/WebReflection/udomdiff/pull/2\n\n/* eslint-disable */\n\n/**\n * @param {Node[]} a The list of current/live children\n * @param {Node[]} b The list of future children\n * @param {(entry: Node, action: number) => Node} get\n * The callback invoked per each entry related DOM operation.\n * @param {Node} [before] The optional node used as anchor to insert before.\n * @returns {Node[]} The same list of future children.\n */\n\nvar udomdiff = ((a, b, get, before) => {\n  const bLength = b.length;\n  let aEnd = a.length;\n  let bEnd = bLength;\n  let aStart = 0;\n  let bStart = 0;\n  let map = null;\n\n  while (aStart < aEnd || bStart < bEnd) {\n    // append head, tail, or nodes in between: fast path\n    if (aEnd === aStart) {\n      // we could be in a situation where the rest of nodes that\n      // need to be added are not at the end, and in such case\n      // the node to `insertBefore`, if the index is more than 0\n      // must be retrieved, otherwise it's gonna be the first item.\n      const node = bEnd < bLength ? bStart ? get(b[bStart - 1], -0).nextSibling : get(b[bEnd - bStart], 0) : before;\n\n      while (bStart < bEnd) insertBefore(get(b[bStart++], 1), node);\n    } // remove head or tail: fast path\n    else if (bEnd === bStart) {\n      while (aStart < aEnd) {\n        // remove the node only if it's unknown or not live\n        if (!map || !map.has(a[aStart])) removeChild(get(a[aStart], -1));\n        aStart++;\n      }\n    } // same node: fast path\n    else if (a[aStart] === b[bStart]) {\n      aStart++;\n      bStart++;\n    } // same tail: fast path\n    else if (a[aEnd - 1] === b[bEnd - 1]) {\n      aEnd--;\n      bEnd--;\n    } // The once here single last swap \"fast path\" has been removed in v1.1.0\n    // https://github.com/WebReflection/udomdiff/blob/single-final-swap/esm/index.js#L69-L85\n    // reverse swap: also fast path\n    else if (a[aStart] === b[bEnd - 1] && b[bStart] === a[aEnd - 1]) {\n      // this is a \"shrink\" operation that could happen in these cases:\n      // [1, 2, 3, 4, 5]\n      // [1, 4, 3, 2, 5]\n      // or asymmetric too\n      // [1, 2, 3, 4, 5]\n      // [1, 2, 3, 5, 6, 4]\n      const node = get(a[--aEnd], -1).nextSibling;\n      insertBefore(get(b[bStart++], 1), get(a[aStart++], -1).nextSibling);\n      insertBefore(get(b[--bEnd], 1), node); // mark the future index as identical (yeah, it's dirty, but cheap 👍)\n      // The main reason to do this, is that when a[aEnd] will be reached,\n      // the loop will likely be on the fast path, as identical to b[bEnd].\n      // In the best case scenario, the next loop will skip the tail,\n      // but in the worst one, this node will be considered as already\n      // processed, bailing out pretty quickly from the map index check\n\n      a[aEnd] = b[bEnd];\n    } // map based fallback, \"slow\" path\n    else {\n      // the map requires an O(bEnd - bStart) operation once\n      // to store all future nodes indexes for later purposes.\n      // In the worst case scenario, this is a full O(N) cost,\n      // and such scenario happens at least when all nodes are different,\n      // but also if both first and last items of the lists are different\n      if (!map) {\n        map = new Map();\n        let i = bStart;\n\n        while (i < bEnd) map.set(b[i], i++);\n      } // if it's a future node, hence it needs some handling\n\n\n      if (map.has(a[aStart])) {\n        // grab the index of such node, 'cause it might have been processed\n        const index = map.get(a[aStart]); // if it's not already processed, look on demand for the next LCS\n\n        if (bStart < index && index < bEnd) {\n          let i = aStart; // counts the amount of nodes that are the same in the future\n\n          let sequence = 1;\n\n          while (++i < aEnd && i < bEnd && map.get(a[i]) === index + sequence) sequence++; // effort decision here: if the sequence is longer than replaces\n          // needed to reach such sequence, which would brings again this loop\n          // to the fast path, prepend the difference before a sequence,\n          // and move only the future list index forward, so that aStart\n          // and bStart will be aligned again, hence on the fast path.\n          // An example considering aStart and bStart are both 0:\n          // a: [1, 2, 3, 4]\n          // b: [7, 1, 2, 3, 6]\n          // this would place 7 before 1 and, from that time on, 1, 2, and 3\n          // will be processed at zero cost\n\n\n          if (sequence > index - bStart) {\n            const node = get(a[aStart], 0);\n\n            while (bStart < index) insertBefore(get(b[bStart++], 1), node);\n          } // if the effort wasn't good enough, fallback to a replace,\n          // moving both source and target indexes forward, hoping that some\n          // similar node will be found later on, to go back to the fast path\n          else {\n            replaceChild(get(b[bStart++], 1), get(a[aStart++], -1));\n          }\n        } // otherwise move the source forward, 'cause there's nothing to do\n        else aStart++;\n      } // this node has no meaning in the future list, so it's more than safe\n      // to remove it, and check the next live node out instead, meaning\n      // that only the live list index should be forwarded\n      else removeChild(get(a[aStart++], -1));\n    }\n  }\n\n  return b;\n});\n\nconst UNMOUNT_SCOPE = Symbol('unmount');\nconst EachBinding = {\n  // dynamic binding properties\n  // childrenMap: null,\n  // node: null,\n  // root: null,\n  // condition: null,\n  // evaluate: null,\n  // template: null,\n  // isTemplateTag: false,\n  nodes: [],\n\n  // getKey: null,\n  // indexName: null,\n  // itemName: null,\n  // afterPlaceholder: null,\n  // placeholder: null,\n  // API methods\n  mount(scope, parentScope) {\n    return this.update(scope, parentScope);\n  },\n\n  update(scope, parentScope) {\n    const {\n      placeholder,\n      nodes,\n      childrenMap\n    } = this;\n    const collection = scope === UNMOUNT_SCOPE ? null : this.evaluate(scope);\n    const items = collection ? Array.from(collection) : []; // prepare the diffing\n\n    const {\n      newChildrenMap,\n      batches,\n      futureNodes\n    } = createPatch(items, scope, parentScope, this); // patch the DOM only if there are new nodes\n\n    udomdiff(nodes, futureNodes, patch(Array.from(childrenMap.values()), parentScope), placeholder); // trigger the mounts and the updates\n\n    batches.forEach(fn => fn()); // update the children map\n\n    this.childrenMap = newChildrenMap;\n    this.nodes = futureNodes; // make sure that the loop edge nodes are marked\n\n    markEdgeNodes(this.nodes);\n    return this;\n  },\n\n  unmount(scope, parentScope) {\n    this.update(UNMOUNT_SCOPE, parentScope);\n    return this;\n  }\n\n};\n/**\n * Patch the DOM while diffing\n * @param   {any[]} redundant - list of all the children (template, nodes, context) added via each\n * @param   {*} parentScope - scope of the parent template\n * @returns {Function} patch function used by domdiff\n */\n\nfunction patch(redundant, parentScope) {\n  return (item, info) => {\n    if (info < 0) {\n      // get the last element added to the childrenMap saved previously\n      const element = redundant[redundant.length - 1];\n\n      if (element) {\n        // get the nodes and the template in stored in the last child of the childrenMap\n        const {\n          template,\n          nodes,\n          context\n        } = element; // remove the last node (notice <template> tags might have more children nodes)\n\n        nodes.pop(); // notice that we pass null as last argument because\n        // the root node and its children will be removed by domdiff\n\n        if (!nodes.length) {\n          // we have cleared all the children nodes and we can unmount this template\n          redundant.pop();\n          template.unmount(context, parentScope, null);\n        }\n      }\n    }\n\n    return item;\n  };\n}\n/**\n * Check whether a template must be filtered from a loop\n * @param   {Function} condition - filter function\n * @param   {Object} context - argument passed to the filter function\n * @returns {boolean} true if this item should be skipped\n */\n\n\nfunction mustFilterItem(condition, context) {\n  return condition ? !condition(context) : false;\n}\n/**\n * Extend the scope of the looped template\n * @param   {Object} scope - current template scope\n * @param   {Object} options - options\n * @param   {string} options.itemName - key to identify the looped item in the new context\n * @param   {string} options.indexName - key to identify the index of the looped item\n * @param   {number} options.index - current index\n * @param   {*} options.item - collection item looped\n * @returns {Object} enhanced scope object\n */\n\n\nfunction extendScope(scope, _ref) {\n  let {\n    itemName,\n    indexName,\n    index,\n    item\n  } = _ref;\n  defineProperty(scope, itemName, item);\n  if (indexName) defineProperty(scope, indexName, index);\n  return scope;\n}\n/**\n * Mark the first and last nodes in order to ignore them in case we need to retrieve the <template> fragment nodes\n * @param {Array[]} nodes - each binding nodes list\n * @returns {undefined} void function\n */\n\n\nfunction markEdgeNodes(nodes) {\n  const first = nodes[0];\n  const last = nodes[nodes.length - 1];\n  if (first) first[HEAD_SYMBOL] = true;\n  if (last) last[TAIL_SYMBOL] = true;\n}\n/**\n * Loop the current template items\n * @param   {Array} items - expression collection value\n * @param   {*} scope - template scope\n * @param   {*} parentScope - scope of the parent template\n * @param   {EachBinding} binding - each binding object instance\n * @returns {Object} data\n * @returns {Map} data.newChildrenMap - a Map containing the new children template structure\n * @returns {Array} data.batches - array containing the template lifecycle functions to trigger\n * @returns {Array} data.futureNodes - array containing the nodes we need to diff\n */\n\n\nfunction createPatch(items, scope, parentScope, binding) {\n  const {\n    condition,\n    template,\n    childrenMap,\n    itemName,\n    getKey,\n    indexName,\n    root,\n    isTemplateTag\n  } = binding;\n  const newChildrenMap = new Map();\n  const batches = [];\n  const futureNodes = [];\n  items.forEach((item, index) => {\n    const context = extendScope(Object.create(scope), {\n      itemName,\n      indexName,\n      index,\n      item\n    });\n    const key = getKey ? getKey(context) : index;\n    const oldItem = childrenMap.get(key);\n    const nodes = [];\n\n    if (mustFilterItem(condition, context)) {\n      return;\n    }\n\n    const mustMount = !oldItem;\n    const componentTemplate = oldItem ? oldItem.template : template.clone();\n    const el = componentTemplate.el || root.cloneNode();\n    const meta = isTemplateTag && mustMount ? createTemplateMeta(componentTemplate) : componentTemplate.meta;\n\n    if (mustMount) {\n      batches.push(() => componentTemplate.mount(el, context, parentScope, meta));\n    } else {\n      batches.push(() => componentTemplate.update(context, parentScope));\n    } // create the collection of nodes to update or to add\n    // in case of template tags we need to add all its children nodes\n\n\n    if (isTemplateTag) {\n      nodes.push(...(mustMount ? meta.children : getFragmentChildren(meta)));\n    } else {\n      nodes.push(el);\n    } // delete the old item from the children map\n\n\n    childrenMap.delete(key);\n    futureNodes.push(...nodes); // update the children map\n\n    newChildrenMap.set(key, {\n      nodes,\n      template: componentTemplate,\n      context,\n      index\n    });\n  });\n  return {\n    newChildrenMap,\n    batches,\n    futureNodes\n  };\n}\n\nfunction create$6(node, _ref2) {\n  let {\n    evaluate,\n    condition,\n    itemName,\n    indexName,\n    getKey,\n    template\n  } = _ref2;\n  const placeholder = document.createTextNode('');\n  const root = node.cloneNode();\n  insertBefore(placeholder, node);\n  removeChild(node);\n  return Object.assign({}, EachBinding, {\n    childrenMap: new Map(),\n    node,\n    root,\n    condition,\n    evaluate,\n    isTemplateTag: isTemplate(root),\n    template: template.createDOM(node),\n    getKey,\n    indexName,\n    itemName,\n    placeholder\n  });\n}\n\n/**\n * Binding responsible for the `if` directive\n */\n\nconst IfBinding = {\n  // dynamic binding properties\n  // node: null,\n  // evaluate: null,\n  // isTemplateTag: false,\n  // placeholder: null,\n  // template: null,\n  // API methods\n  mount(scope, parentScope) {\n    return this.update(scope, parentScope);\n  },\n\n  update(scope, parentScope) {\n    const value = !!this.evaluate(scope);\n    const mustMount = !this.value && value;\n    const mustUnmount = this.value && !value;\n\n    const mount = () => {\n      const pristine = this.node.cloneNode();\n      insertBefore(pristine, this.placeholder);\n      this.template = this.template.clone();\n      this.template.mount(pristine, scope, parentScope);\n    };\n\n    switch (true) {\n      case mustMount:\n        mount();\n        break;\n\n      case mustUnmount:\n        this.unmount(scope);\n        break;\n\n      default:\n        if (value) this.template.update(scope, parentScope);\n    }\n\n    this.value = value;\n    return this;\n  },\n\n  unmount(scope, parentScope) {\n    this.template.unmount(scope, parentScope, true);\n    return this;\n  }\n\n};\nfunction create$5(node, _ref) {\n  let {\n    evaluate,\n    template\n  } = _ref;\n  const placeholder = document.createTextNode('');\n  insertBefore(placeholder, node);\n  removeChild(node);\n  return Object.assign({}, IfBinding, {\n    node,\n    evaluate,\n    placeholder,\n    template: template.createDOM(node)\n  });\n}\n\n/**\n * Throw an error with a descriptive message\n * @param   { string } message - error message\n * @returns { undefined } hoppla.. at this point the program should stop working\n */\n\nfunction panic(message) {\n  throw new Error(message);\n}\n/**\n * Returns the memoized (cached) function.\n * // borrowed from https://www.30secondsofcode.org/js/s/memoize\n * @param {Function} fn - function to memoize\n * @returns {Function} memoize function\n */\n\nfunction memoize(fn) {\n  const cache = new Map();\n\n  const cached = val => {\n    return cache.has(val) ? cache.get(val) : cache.set(val, fn.call(this, val)) && cache.get(val);\n  };\n\n  cached.cache = cache;\n  return cached;\n}\n/**\n * Evaluate a list of attribute expressions\n * @param   {Array} attributes - attribute expressions generated by the riot compiler\n * @returns {Object} key value pairs with the result of the computation\n */\n\nfunction evaluateAttributeExpressions(attributes) {\n  return attributes.reduce((acc, attribute) => {\n    const {\n      value,\n      type\n    } = attribute;\n\n    switch (true) {\n      // spread attribute\n      case !attribute.name && type === ATTRIBUTE:\n        return Object.assign({}, acc, value);\n      // value attribute\n\n      case type === VALUE:\n        acc.value = attribute.value;\n        break;\n      // normal attributes\n\n      default:\n        acc[dashToCamelCase(attribute.name)] = attribute.value;\n    }\n\n    return acc;\n  }, {});\n}\n\nconst ElementProto = typeof Element === 'undefined' ? {} : Element.prototype;\nconst isNativeHtmlProperty = memoize(name => ElementProto.hasOwnProperty(name)); // eslint-disable-line\n\n/**\n * Add all the attributes provided\n * @param   {HTMLElement} node - target node\n * @param   {Object} attributes - object containing the attributes names and values\n * @returns {undefined} sorry it's a void function :(\n */\n\nfunction setAllAttributes(node, attributes) {\n  Object.entries(attributes).forEach(_ref => {\n    let [name, value] = _ref;\n    return attributeExpression(node, {\n      name\n    }, value);\n  });\n}\n/**\n * Remove all the attributes provided\n * @param   {HTMLElement} node - target node\n * @param   {Object} newAttributes - object containing all the new attribute names\n * @param   {Object} oldAttributes - object containing all the old attribute names\n * @returns {undefined} sorry it's a void function :(\n */\n\n\nfunction removeAllAttributes(node, newAttributes, oldAttributes) {\n  const newKeys = newAttributes ? Object.keys(newAttributes) : [];\n  Object.keys(oldAttributes).filter(name => !newKeys.includes(name)).forEach(attribute => node.removeAttribute(attribute));\n}\n/**\n * Check whether the attribute value can be rendered\n * @param {*} value - expression value\n * @returns {boolean} true if we can render this attribute value\n */\n\n\nfunction canRenderAttribute(value) {\n  return value === true || ['string', 'number'].includes(typeof value);\n}\n/**\n * Check whether the attribute should be removed\n * @param {*} value - expression value\n * @returns {boolean} boolean - true if the attribute can be removed}\n */\n\n\nfunction shouldRemoveAttribute(value) {\n  return !value && value !== 0;\n}\n/**\n * This methods handles the DOM attributes updates\n * @param   {HTMLElement} node - target node\n * @param   {Object} expression - expression object\n * @param   {string} expression.name - attribute name\n * @param   {*} value - new expression value\n * @param   {*} oldValue - the old expression cached value\n * @returns {undefined}\n */\n\n\nfunction attributeExpression(node, _ref2, value, oldValue) {\n  let {\n    name\n  } = _ref2;\n\n  // is it a spread operator? {...attributes}\n  if (!name) {\n    if (oldValue) {\n      // remove all the old attributes\n      removeAllAttributes(node, value, oldValue);\n    } // is the value still truthy?\n\n\n    if (value) {\n      setAllAttributes(node, value);\n    }\n\n    return;\n  } // handle boolean attributes\n\n\n  if (!isNativeHtmlProperty(name) && (isBoolean(value) || isObject(value) || isFunction(value))) {\n    node[name] = value;\n  }\n\n  if (shouldRemoveAttribute(value)) {\n    node.removeAttribute(name);\n  } else if (canRenderAttribute(value)) {\n    node.setAttribute(name, normalizeValue(name, value));\n  }\n}\n/**\n * Get the value as string\n * @param   {string} name - attribute name\n * @param   {*} value - user input value\n * @returns {string} input value as string\n */\n\nfunction normalizeValue(name, value) {\n  // be sure that expressions like selected={ true } will be always rendered as selected='selected'\n  return value === true ? name : value;\n}\n\nconst RE_EVENTS_PREFIX = /^on/;\n\nconst getCallbackAndOptions = value => Array.isArray(value) ? value : [value, false]; // see also https://medium.com/@WebReflection/dom-handleevent-a-cross-platform-standard-since-year-2000-5bf17287fd38\n\n\nconst EventListener = {\n  handleEvent(event) {\n    this[event.type](event);\n  }\n\n};\nconst ListenersWeakMap = new WeakMap();\n\nconst createListener = node => {\n  const listener = Object.create(EventListener);\n  ListenersWeakMap.set(node, listener);\n  return listener;\n};\n/**\n * Set a new event listener\n * @param   {HTMLElement} node - target node\n * @param   {Object} expression - expression object\n * @param   {string} expression.name - event name\n * @param   {*} value - new expression value\n * @returns {value} the callback just received\n */\n\n\nfunction eventExpression(node, _ref, value) {\n  let {\n    name\n  } = _ref;\n  const normalizedEventName = name.replace(RE_EVENTS_PREFIX, '');\n  const eventListener = ListenersWeakMap.get(node) || createListener(node);\n  const [callback, options] = getCallbackAndOptions(value);\n  const handler = eventListener[normalizedEventName];\n  const mustRemoveEvent = handler && !callback;\n  const mustAddEvent = callback && !handler;\n\n  if (mustRemoveEvent) {\n    node.removeEventListener(normalizedEventName, eventListener);\n  }\n\n  if (mustAddEvent) {\n    node.addEventListener(normalizedEventName, eventListener, options);\n  }\n\n  eventListener[normalizedEventName] = callback;\n}\n\n/**\n * Normalize the user value in order to render a empty string in case of falsy values\n * @param   {*} value - user input value\n * @returns {string} hopefully a string\n */\n\nfunction normalizeStringValue(value) {\n  return isNil(value) ? '' : value;\n}\n\n/**\n * Get the the target text node to update or create one from of a comment node\n * @param   {HTMLElement} node - any html element containing childNodes\n * @param   {number} childNodeIndex - index of the text node in the childNodes list\n * @returns {Text} the text node to update\n */\n\nconst getTextNode = (node, childNodeIndex) => {\n  const target = node.childNodes[childNodeIndex];\n\n  if (target.nodeType === Node.COMMENT_NODE) {\n    const textNode = document.createTextNode('');\n    node.replaceChild(textNode, target);\n    return textNode;\n  }\n\n  return target;\n};\n/**\n * This methods handles a simple text expression update\n * @param   {HTMLElement} node - target node\n * @param   {Object} data - expression object\n * @param   {*} value - new expression value\n * @returns {undefined}\n */\n\nfunction textExpression(node, data, value) {\n  node.data = normalizeStringValue(value);\n}\n\n/**\n * This methods handles the input fileds value updates\n * @param   {HTMLElement} node - target node\n * @param   {Object} expression - expression object\n * @param   {*} value - new expression value\n * @returns {undefined}\n */\n\nfunction valueExpression(node, expression, value) {\n  node.value = normalizeStringValue(value);\n}\n\nvar expressions = {\n  [ATTRIBUTE]: attributeExpression,\n  [EVENT]: eventExpression,\n  [TEXT]: textExpression,\n  [VALUE]: valueExpression\n};\n\nconst Expression = {\n  // Static props\n  // node: null,\n  // value: null,\n  // API methods\n\n  /**\n   * Mount the expression evaluating its initial value\n   * @param   {*} scope - argument passed to the expression to evaluate its current values\n   * @returns {Expression} self\n   */\n  mount(scope) {\n    // hopefully a pure function\n    this.value = this.evaluate(scope); // IO() DOM updates\n\n    apply(this, this.value);\n    return this;\n  },\n\n  /**\n   * Update the expression if its value changed\n   * @param   {*} scope - argument passed to the expression to evaluate its current values\n   * @returns {Expression} self\n   */\n  update(scope) {\n    // pure function\n    const value = this.evaluate(scope);\n\n    if (this.value !== value) {\n      // IO() DOM updates\n      apply(this, value);\n      this.value = value;\n    }\n\n    return this;\n  },\n\n  /**\n   * Expression teardown method\n   * @returns {Expression} self\n   */\n  unmount() {\n    // unmount only the event handling expressions\n    if (this.type === EVENT) apply(this, null);\n    return this;\n  }\n\n};\n/**\n * IO() function to handle the DOM updates\n * @param {Expression} expression - expression object\n * @param {*} value - current expression value\n * @returns {undefined}\n */\n\nfunction apply(expression, value) {\n  return expressions[expression.type](expression.node, expression, value, expression.value);\n}\n\nfunction create$4(node, data) {\n  return Object.assign({}, Expression, data, {\n    node: data.type === TEXT ? getTextNode(node, data.childNodeIndex) : node\n  });\n}\n\n/**\n * Create a flat object having as keys a list of methods that if dispatched will propagate\n * on the whole collection\n * @param   {Array} collection - collection to iterate\n * @param   {Array<string>} methods - methods to execute on each item of the collection\n * @param   {*} context - context returned by the new methods created\n * @returns {Object} a new object to simplify the the nested methods dispatching\n */\nfunction flattenCollectionMethods(collection, methods, context) {\n  return methods.reduce((acc, method) => {\n    return Object.assign({}, acc, {\n      [method]: scope => {\n        return collection.map(item => item[method](scope)) && context;\n      }\n    });\n  }, {});\n}\n\nfunction create$3(node, _ref) {\n  let {\n    expressions\n  } = _ref;\n  return Object.assign({}, flattenCollectionMethods(expressions.map(expression => create$4(node, expression)), ['mount', 'update', 'unmount']));\n}\n\nfunction extendParentScope(attributes, scope, parentScope) {\n  if (!attributes || !attributes.length) return parentScope;\n  const expressions = attributes.map(attr => Object.assign({}, attr, {\n    value: attr.evaluate(scope)\n  }));\n  return Object.assign(Object.create(parentScope || null), evaluateAttributeExpressions(expressions));\n} // this function is only meant to fix an edge case\n// https://github.com/riot/riot/issues/2842\n\n\nconst getRealParent = (scope, parentScope) => scope[PARENT_KEY_SYMBOL] || parentScope;\n\nconst SlotBinding = {\n  // dynamic binding properties\n  // node: null,\n  // name: null,\n  attributes: [],\n\n  // template: null,\n  getTemplateScope(scope, parentScope) {\n    return extendParentScope(this.attributes, scope, parentScope);\n  },\n\n  // API methods\n  mount(scope, parentScope) {\n    const templateData = scope.slots ? scope.slots.find(_ref => {\n      let {\n        id\n      } = _ref;\n      return id === this.name;\n    }) : false;\n    const {\n      parentNode\n    } = this.node;\n    const realParent = getRealParent(scope, parentScope);\n    this.template = templateData && create(templateData.html, templateData.bindings).createDOM(parentNode);\n\n    if (this.template) {\n      cleanNode(this.node);\n      this.template.mount(this.node, this.getTemplateScope(scope, realParent), realParent);\n      this.template.children = Array.from(this.node.childNodes);\n    }\n\n    moveSlotInnerContent(this.node);\n    removeChild(this.node);\n    return this;\n  },\n\n  update(scope, parentScope) {\n    if (this.template) {\n      const realParent = getRealParent(scope, parentScope);\n      this.template.update(this.getTemplateScope(scope, realParent), realParent);\n    }\n\n    return this;\n  },\n\n  unmount(scope, parentScope, mustRemoveRoot) {\n    if (this.template) {\n      this.template.unmount(this.getTemplateScope(scope, parentScope), null, mustRemoveRoot);\n    }\n\n    return this;\n  }\n\n};\n/**\n * Move the inner content of the slots outside of them\n * @param   {HTMLElement} slot - slot node\n * @returns {undefined} it's a void method ¯\\_(ツ)_/¯\n */\n\nfunction moveSlotInnerContent(slot) {\n  const child = slot && slot.firstChild;\n  if (!child) return;\n  insertBefore(child, slot);\n  moveSlotInnerContent(slot);\n}\n/**\n * Create a single slot binding\n * @param   {HTMLElement} node - slot node\n * @param   {string} name - slot id\n * @param   {AttributeExpressionData[]} attributes - slot attributes\n * @returns {Object} Slot binding object\n */\n\n\nfunction createSlot(node, _ref2) {\n  let {\n    name,\n    attributes\n  } = _ref2;\n  return Object.assign({}, SlotBinding, {\n    attributes,\n    node,\n    name\n  });\n}\n\n/**\n * Create a new tag object if it was registered before, otherwise fallback to the simple\n * template chunk\n * @param   {Function} component - component factory function\n * @param   {Array<Object>} slots - array containing the slots markup\n * @param   {Array} attributes - dynamic attributes that will be received by the tag element\n * @returns {TagImplementation|TemplateChunk} a tag implementation or a template chunk as fallback\n */\n\nfunction getTag(component, slots, attributes) {\n  if (slots === void 0) {\n    slots = [];\n  }\n\n  if (attributes === void 0) {\n    attributes = [];\n  }\n\n  // if this tag was registered before we will return its implementation\n  if (component) {\n    return component({\n      slots,\n      attributes\n    });\n  } // otherwise we return a template chunk\n\n\n  return create(slotsToMarkup(slots), [...slotBindings(slots), {\n    // the attributes should be registered as binding\n    // if we fallback to a normal template chunk\n    expressions: attributes.map(attr => {\n      return Object.assign({\n        type: ATTRIBUTE\n      }, attr);\n    })\n  }]);\n}\n/**\n * Merge all the slots bindings into a single array\n * @param   {Array<Object>} slots - slots collection\n * @returns {Array<Bindings>} flatten bindings array\n */\n\n\nfunction slotBindings(slots) {\n  return slots.reduce((acc, _ref) => {\n    let {\n      bindings\n    } = _ref;\n    return acc.concat(bindings);\n  }, []);\n}\n/**\n * Merge all the slots together in a single markup string\n * @param   {Array<Object>} slots - slots collection\n * @returns {string} markup of all the slots in a single string\n */\n\n\nfunction slotsToMarkup(slots) {\n  return slots.reduce((acc, slot) => {\n    return acc + slot.html;\n  }, '');\n}\n\nconst TagBinding = {\n  // dynamic binding properties\n  // node: null,\n  // evaluate: null,\n  // name: null,\n  // slots: null,\n  // tag: null,\n  // attributes: null,\n  // getComponent: null,\n  mount(scope) {\n    return this.update(scope);\n  },\n\n  update(scope, parentScope) {\n    const name = this.evaluate(scope); // simple update\n\n    if (name && name === this.name) {\n      this.tag.update(scope);\n    } else {\n      // unmount the old tag if it exists\n      this.unmount(scope, parentScope, true); // mount the new tag\n\n      this.name = name;\n      this.tag = getTag(this.getComponent(name), this.slots, this.attributes);\n      this.tag.mount(this.node, scope);\n    }\n\n    return this;\n  },\n\n  unmount(scope, parentScope, keepRootTag) {\n    if (this.tag) {\n      // keep the root tag\n      this.tag.unmount(keepRootTag);\n    }\n\n    return this;\n  }\n\n};\nfunction create$2(node, _ref2) {\n  let {\n    evaluate,\n    getComponent,\n    slots,\n    attributes\n  } = _ref2;\n  return Object.assign({}, TagBinding, {\n    node,\n    evaluate,\n    slots,\n    attributes,\n    getComponent\n  });\n}\n\nvar bindings = {\n  [IF]: create$5,\n  [SIMPLE]: create$3,\n  [EACH]: create$6,\n  [TAG]: create$2,\n  [SLOT]: createSlot\n};\n\n/**\n * Text expressions in a template tag will get childNodeIndex value normalized\n * depending on the position of the <template> tag offset\n * @param   {Expression[]} expressions - riot expressions array\n * @param   {number} textExpressionsOffset - offset of the <template> tag\n * @returns {Expression[]} expressions containing the text expressions normalized\n */\n\nfunction fixTextExpressionsOffset(expressions, textExpressionsOffset) {\n  return expressions.map(e => e.type === TEXT ? Object.assign({}, e, {\n    childNodeIndex: e.childNodeIndex + textExpressionsOffset\n  }) : e);\n}\n/**\n * Bind a new expression object to a DOM node\n * @param   {HTMLElement} root - DOM node where to bind the expression\n * @param   {TagBindingData} binding - binding data\n * @param   {number|null} templateTagOffset - if it's defined we need to fix the text expressions childNodeIndex offset\n * @returns {Binding} Binding object\n */\n\n\nfunction create$1(root, binding, templateTagOffset) {\n  const {\n    selector,\n    type,\n    redundantAttribute,\n    expressions\n  } = binding; // find the node to apply the bindings\n\n  const node = selector ? root.querySelector(selector) : root; // remove eventually additional attributes created only to select this node\n\n  if (redundantAttribute) node.removeAttribute(redundantAttribute);\n  const bindingExpressions = expressions || []; // init the binding\n\n  return (bindings[type] || bindings[SIMPLE])(node, Object.assign({}, binding, {\n    expressions: templateTagOffset && !selector ? fixTextExpressionsOffset(bindingExpressions, templateTagOffset) : bindingExpressions\n  }));\n}\n\nfunction createHTMLTree(html, root) {\n  const template = isTemplate(root) ? root : document.createElement('template');\n  template.innerHTML = html;\n  return template.content;\n} // for svg nodes we need a bit more work\n\n\nfunction createSVGTree(html, container) {\n  // create the SVGNode\n  const svgNode = container.ownerDocument.importNode(new window.DOMParser().parseFromString(`<svg xmlns=\"http://www.w3.org/2000/svg\">${html}</svg>`, 'application/xml').documentElement, true);\n  return svgNode;\n}\n/**\n * Create the DOM that will be injected\n * @param {Object} root - DOM node to find out the context where the fragment will be created\n * @param   {string} html - DOM to create as string\n * @returns {HTMLDocumentFragment|HTMLElement} a new html fragment\n */\n\n\nfunction createDOMTree(root, html) {\n  if (isSvg(root)) return createSVGTree(html, root);\n  return createHTMLTree(html, root);\n}\n\n/**\n * Inject the DOM tree into a target node\n * @param   {HTMLElement} el - target element\n * @param   {DocumentFragment|SVGElement} dom - dom tree to inject\n * @returns {undefined}\n */\n\nfunction injectDOM(el, dom) {\n  switch (true) {\n    case isSvg(el):\n      moveChildren(dom, el);\n      break;\n\n    case isTemplate(el):\n      el.parentNode.replaceChild(dom, el);\n      break;\n\n    default:\n      el.appendChild(dom);\n  }\n}\n\n/**\n * Create the Template DOM skeleton\n * @param   {HTMLElement} el - root node where the DOM will be injected\n * @param   {string|HTMLElement} html - HTML markup or HTMLElement that will be injected into the root node\n * @returns {?DocumentFragment} fragment that will be injected into the root node\n */\n\nfunction createTemplateDOM(el, html) {\n  return html && (typeof html === 'string' ? createDOMTree(el, html) : html);\n}\n/**\n * Get the offset of the <template> tag\n * @param {HTMLElement} parentNode - template tag parent node\n * @param {HTMLElement} el - the template tag we want to render\n * @param   {Object} meta - meta properties needed to handle the <template> tags in loops\n * @returns {number} offset of the <template> tag calculated from its siblings DOM nodes\n */\n\n\nfunction getTemplateTagOffset(parentNode, el, meta) {\n  const siblings = Array.from(parentNode.childNodes);\n  return Math.max(siblings.indexOf(el), siblings.indexOf(meta.head) + 1, 0);\n}\n/**\n * Template Chunk model\n * @type {Object}\n */\n\n\nconst TemplateChunk = Object.freeze({\n  // Static props\n  // bindings: null,\n  // bindingsData: null,\n  // html: null,\n  // isTemplateTag: false,\n  // fragment: null,\n  // children: null,\n  // dom: null,\n  // el: null,\n\n  /**\n   * Create the template DOM structure that will be cloned on each mount\n   * @param   {HTMLElement} el - the root node\n   * @returns {TemplateChunk} self\n   */\n  createDOM(el) {\n    // make sure that the DOM gets created before cloning the template\n    this.dom = this.dom || createTemplateDOM(el, this.html) || document.createDocumentFragment();\n    return this;\n  },\n\n  // API methods\n\n  /**\n   * Attach the template to a DOM node\n   * @param   {HTMLElement} el - target DOM node\n   * @param   {*} scope - template data\n   * @param   {*} parentScope - scope of the parent template tag\n   * @param   {Object} meta - meta properties needed to handle the <template> tags in loops\n   * @returns {TemplateChunk} self\n   */\n  mount(el, scope, parentScope, meta) {\n    if (meta === void 0) {\n      meta = {};\n    }\n\n    if (!el) throw new Error('Please provide DOM node to mount properly your template');\n    if (this.el) this.unmount(scope); // <template> tags require a bit more work\n    // the template fragment might be already created via meta outside of this call\n\n    const {\n      fragment,\n      children,\n      avoidDOMInjection\n    } = meta; // <template> bindings of course can not have a root element\n    // so we check the parent node to set the query selector bindings\n\n    const {\n      parentNode\n    } = children ? children[0] : el;\n    const isTemplateTag = isTemplate(el);\n    const templateTagOffset = isTemplateTag ? getTemplateTagOffset(parentNode, el, meta) : null; // create the DOM if it wasn't created before\n\n    this.createDOM(el); // create the DOM of this template cloning the original DOM structure stored in this instance\n    // notice that if a documentFragment was passed (via meta) we will use it instead\n\n    const cloneNode = fragment || this.dom.cloneNode(true); // store root node\n    // notice that for template tags the root note will be the parent tag\n\n    this.el = isTemplateTag ? parentNode : el; // create the children array only for the <template> fragments\n\n    this.children = isTemplateTag ? children || Array.from(cloneNode.childNodes) : null; // inject the DOM into the el only if a fragment is available\n\n    if (!avoidDOMInjection && cloneNode) injectDOM(el, cloneNode); // create the bindings\n\n    this.bindings = this.bindingsData.map(binding => create$1(this.el, binding, templateTagOffset));\n    this.bindings.forEach(b => b.mount(scope, parentScope)); // store the template meta properties\n\n    this.meta = meta;\n    return this;\n  },\n\n  /**\n   * Update the template with fresh data\n   * @param   {*} scope - template data\n   * @param   {*} parentScope - scope of the parent template tag\n   * @returns {TemplateChunk} self\n   */\n  update(scope, parentScope) {\n    this.bindings.forEach(b => b.update(scope, parentScope));\n    return this;\n  },\n\n  /**\n   * Remove the template from the node where it was initially mounted\n   * @param   {*} scope - template data\n   * @param   {*} parentScope - scope of the parent template tag\n   * @param   {boolean|null} mustRemoveRoot - if true remove the root element,\n   * if false or undefined clean the root tag content, if null don't touch the DOM\n   * @returns {TemplateChunk} self\n   */\n  unmount(scope, parentScope, mustRemoveRoot) {\n    if (mustRemoveRoot === void 0) {\n      mustRemoveRoot = false;\n    }\n\n    const el = this.el;\n\n    if (!el) {\n      return this;\n    }\n\n    this.bindings.forEach(b => b.unmount(scope, parentScope, mustRemoveRoot));\n\n    switch (true) {\n      // pure components should handle the DOM unmount updates by themselves\n      // for mustRemoveRoot === null don't touch the DOM\n      case el[IS_PURE_SYMBOL] || mustRemoveRoot === null:\n        break;\n      // if children are declared, clear them\n      // applicable for <template> and <slot/> bindings\n\n      case Array.isArray(this.children):\n        clearChildren(this.children);\n        break;\n      // clean the node children only\n\n      case !mustRemoveRoot:\n        cleanNode(el);\n        break;\n      // remove the root node only if the mustRemoveRoot is truly\n\n      case !!mustRemoveRoot:\n        removeChild(el);\n        break;\n    }\n\n    this.el = null;\n    return this;\n  },\n\n  /**\n   * Clone the template chunk\n   * @returns {TemplateChunk} a clone of this object resetting the this.el property\n   */\n  clone() {\n    return Object.assign({}, this, {\n      meta: {},\n      el: null\n    });\n  }\n\n});\n/**\n * Create a template chunk wiring also the bindings\n * @param   {string|HTMLElement} html - template string\n * @param   {BindingData[]} bindings - bindings collection\n * @returns {TemplateChunk} a new TemplateChunk copy\n */\n\nfunction create(html, bindings) {\n  if (bindings === void 0) {\n    bindings = [];\n  }\n\n  return Object.assign({}, TemplateChunk, {\n    html,\n    bindingsData: bindings\n  });\n}\n\n/**\n * Method used to bind expressions to a DOM node\n * @param   {string|HTMLElement} html - your static template html structure\n * @param   {Array} bindings - list of the expressions to bind to update the markup\n * @returns {TemplateChunk} a new TemplateChunk object having the `update`,`mount`, `unmount` and `clone` methods\n *\n * @example\n *\n * riotDOMBindings\n *  .template(\n *   `<div expr0><!----></div><div><p expr1><!----><section expr2></section></p>`,\n *   [\n *     {\n *       selector: '[expr0]',\n *       redundantAttribute: 'expr0',\n *       expressions: [\n *         {\n *           type: expressionTypes.TEXT,\n *           childNodeIndex: 0,\n *           evaluate(scope) {\n *             return scope.time;\n *           },\n *         },\n *       ],\n *     },\n *     {\n *       selector: '[expr1]',\n *       redundantAttribute: 'expr1',\n *       expressions: [\n *         {\n *           type: expressionTypes.TEXT,\n *           childNodeIndex: 0,\n *           evaluate(scope) {\n *             return scope.name;\n *           },\n *         },\n *         {\n *           type: 'attribute',\n *           name: 'style',\n *           evaluate(scope) {\n *             return scope.style;\n *           },\n *         },\n *       ],\n *     },\n *     {\n *       selector: '[expr2]',\n *       redundantAttribute: 'expr2',\n *       type: bindingTypes.IF,\n *       evaluate(scope) {\n *         return scope.isVisible;\n *       },\n *       template: riotDOMBindings.template('hello there'),\n *     },\n *   ]\n * )\n */\n\nvar DOMBindings = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  template: create,\n  createBinding: create$1,\n  createExpression: create$4,\n  bindingTypes: bindingTypes,\n  expressionTypes: expressionTypes\n});\n\nfunction noop() {\n  return this;\n}\n/**\n * Autobind the methods of a source object to itself\n * @param   {Object} source - probably a riot tag instance\n * @param   {Array<string>} methods - list of the methods to autobind\n * @returns {Object} the original object received\n */\n\nfunction autobindMethods(source, methods) {\n  methods.forEach(method => {\n    source[method] = source[method].bind(source);\n  });\n  return source;\n}\n/**\n * Call the first argument received only if it's a function otherwise return it as it is\n * @param   {*} source - anything\n * @returns {*} anything\n */\n\nfunction callOrAssign(source) {\n  return isFunction(source) ? source.prototype && source.prototype.constructor ? new source() : source() : source;\n}\n\n/**\n * Converts any DOM node/s to a loopable array\n * @param   { HTMLElement|NodeList } els - single html element or a node list\n * @returns { Array } always a loopable object\n */\nfunction domToArray(els) {\n  // can this object be already looped?\n  if (!Array.isArray(els)) {\n    // is it a node list?\n    if (/^\\[object (HTMLCollection|NodeList|Object)\\]$/.test(Object.prototype.toString.call(els)) && typeof els.length === 'number') return Array.from(els);else // if it's a single node\n      // it will be returned as \"array\" with one single entry\n      return [els];\n  } // this object could be looped out of the box\n\n\n  return els;\n}\n\n/**\n * Simple helper to find DOM nodes returning them as array like loopable object\n * @param   { string|DOMNodeList } selector - either the query or the DOM nodes to arraify\n * @param   { HTMLElement }        ctx      - context defining where the query will search for the DOM nodes\n * @returns { Array } DOM nodes found as array\n */\n\nfunction $(selector, ctx) {\n  return domToArray(typeof selector === 'string' ? (ctx || document).querySelectorAll(selector) : selector);\n}\n\n/**\n * Normalize the return values, in case of a single value we avoid to return an array\n * @param   { Array } values - list of values we want to return\n * @returns { Array|string|boolean } either the whole list of values or the single one found\n * @private\n */\n\nconst normalize = values => values.length === 1 ? values[0] : values;\n/**\n * Parse all the nodes received to get/remove/check their attributes\n * @param   { HTMLElement|NodeList|Array } els    - DOM node/s to parse\n * @param   { string|Array }               name   - name or list of attributes\n * @param   { string }                     method - method that will be used to parse the attributes\n * @returns { Array|string } result of the parsing in a list or a single value\n * @private\n */\n\n\nfunction parseNodes(els, name, method) {\n  const names = typeof name === 'string' ? [name] : name;\n  return normalize(domToArray(els).map(el => {\n    return normalize(names.map(n => el[method](n)));\n  }));\n}\n/**\n * Set any attribute on a single or a list of DOM nodes\n * @param   { HTMLElement|NodeList|Array } els   - DOM node/s to parse\n * @param   { string|Object }              name  - either the name of the attribute to set\n *                                                 or a list of properties as object key - value\n * @param   { string }                     value - the new value of the attribute (optional)\n * @returns { HTMLElement|NodeList|Array } the original array of elements passed to this function\n *\n * @example\n *\n * import { set } from 'bianco.attr'\n *\n * const img = document.createElement('img')\n *\n * set(img, 'width', 100)\n *\n * // or also\n * set(img, {\n *   width: 300,\n *   height: 300\n * })\n *\n */\n\n\nfunction set(els, name, value) {\n  const attrs = typeof name === 'object' ? name : {\n    [name]: value\n  };\n  const props = Object.keys(attrs);\n  domToArray(els).forEach(el => {\n    props.forEach(prop => el.setAttribute(prop, attrs[prop]));\n  });\n  return els;\n}\n/**\n * Get any attribute from a single or a list of DOM nodes\n * @param   { HTMLElement|NodeList|Array } els   - DOM node/s to parse\n * @param   { string|Array }               name  - name or list of attributes to get\n * @returns { Array|string } list of the attributes found\n *\n * @example\n *\n * import { get } from 'bianco.attr'\n *\n * const img = document.createElement('img')\n *\n * get(img, 'width') // => '200'\n *\n * // or also\n * get(img, ['width', 'height']) // => ['200', '300']\n *\n * // or also\n * get([img1, img2], ['width', 'height']) // => [['200', '300'], ['500', '200']]\n */\n\nfunction get(els, name) {\n  return parseNodes(els, name, 'getAttribute');\n}\n\nconst CSS_BY_NAME = new Map();\nconst STYLE_NODE_SELECTOR = 'style[riot]'; // memoized curried function\n\nconst getStyleNode = (style => {\n  return () => {\n    // lazy evaluation:\n    // if this function was already called before\n    // we return its cached result\n    if (style) return style; // create a new style element or use an existing one\n    // and cache it internally\n\n    style = $(STYLE_NODE_SELECTOR)[0] || document.createElement('style');\n    set(style, 'type', 'text/css');\n    /* istanbul ignore next */\n\n    if (!style.parentNode) document.head.appendChild(style);\n    return style;\n  };\n})();\n/**\n * Object that will be used to inject and manage the css of every tag instance\n */\n\n\nvar cssManager = {\n  CSS_BY_NAME,\n\n  /**\n   * Save a tag style to be later injected into DOM\n   * @param { string } name - if it's passed we will map the css to a tagname\n   * @param { string } css - css string\n   * @returns {Object} self\n   */\n  add(name, css) {\n    if (!CSS_BY_NAME.has(name)) {\n      CSS_BY_NAME.set(name, css);\n      this.inject();\n    }\n\n    return this;\n  },\n\n  /**\n   * Inject all previously saved tag styles into DOM\n   * innerHTML seems slow: http://jsperf.com/riot-insert-style\n   * @returns {Object} self\n   */\n  inject() {\n    getStyleNode().innerHTML = [...CSS_BY_NAME.values()].join('\\n');\n    return this;\n  },\n\n  /**\n   * Remove a tag style from the DOM\n   * @param {string} name a registered tagname\n   * @returns {Object} self\n   */\n  remove(name) {\n    if (CSS_BY_NAME.has(name)) {\n      CSS_BY_NAME.delete(name);\n      this.inject();\n    }\n\n    return this;\n  }\n\n};\n\n/**\n * Function to curry any javascript method\n * @param   {Function}  fn - the target function we want to curry\n * @param   {...[args]} acc - initial arguments\n * @returns {Function|*} it will return a function until the target function\n *                       will receive all of its arguments\n */\nfunction curry(fn) {\n  for (var _len = arguments.length, acc = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    acc[_key - 1] = arguments[_key];\n  }\n\n  return function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    args = [...acc, ...args];\n    return args.length < fn.length ? curry(fn, ...args) : fn(...args);\n  };\n}\n\n/**\n * Get the tag name of any DOM node\n * @param   {HTMLElement} element - DOM node we want to inspect\n * @returns {string} name to identify this dom node in riot\n */\n\nfunction getName(element) {\n  return get(element, IS_DIRECTIVE) || element.tagName.toLowerCase();\n}\n\nconst COMPONENT_CORE_HELPERS = Object.freeze({\n  // component helpers\n  $(selector) {\n    return $(selector, this.root)[0];\n  },\n\n  $$(selector) {\n    return $(selector, this.root);\n  }\n\n});\nconst PURE_COMPONENT_API = Object.freeze({\n  [MOUNT_METHOD_KEY]: noop,\n  [UPDATE_METHOD_KEY]: noop,\n  [UNMOUNT_METHOD_KEY]: noop\n});\nconst COMPONENT_LIFECYCLE_METHODS = Object.freeze({\n  [SHOULD_UPDATE_KEY]: noop,\n  [ON_BEFORE_MOUNT_KEY]: noop,\n  [ON_MOUNTED_KEY]: noop,\n  [ON_BEFORE_UPDATE_KEY]: noop,\n  [ON_UPDATED_KEY]: noop,\n  [ON_BEFORE_UNMOUNT_KEY]: noop,\n  [ON_UNMOUNTED_KEY]: noop\n});\nconst MOCKED_TEMPLATE_INTERFACE = Object.assign({}, PURE_COMPONENT_API, {\n  clone: noop,\n  createDOM: noop\n});\n/**\n * Performance optimization for the recursive components\n * @param  {RiotComponentWrapper} componentWrapper - riot compiler generated object\n * @returns {Object} component like interface\n */\n\nconst memoizedCreateComponent = memoize(createComponent);\n/**\n * Evaluate the component properties either from its real attributes or from its initial user properties\n * @param   {HTMLElement} element - component root\n * @param   {Object}  initialProps - initial props\n * @returns {Object} component props key value pairs\n */\n\nfunction evaluateInitialProps(element, initialProps) {\n  if (initialProps === void 0) {\n    initialProps = {};\n  }\n\n  return Object.assign({}, DOMattributesToObject(element), callOrAssign(initialProps));\n}\n/**\n * Bind a DOM node to its component object\n * @param   {HTMLElement} node - html node mounted\n * @param   {Object} component - Riot.js component object\n * @returns {Object} the component object received as second argument\n */\n\n\nconst bindDOMNodeToComponentObject = (node, component) => node[DOM_COMPONENT_INSTANCE_PROPERTY$1] = component;\n/**\n * Wrap the Riot.js core API methods using a mapping function\n * @param   {Function} mapFunction - lifting function\n * @returns {Object} an object having the { mount, update, unmount } functions\n */\n\n\nfunction createCoreAPIMethods(mapFunction) {\n  return [MOUNT_METHOD_KEY, UPDATE_METHOD_KEY, UNMOUNT_METHOD_KEY].reduce((acc, method) => {\n    acc[method] = mapFunction(method);\n    return acc;\n  }, {});\n}\n/**\n * Factory function to create the component templates only once\n * @param   {Function} template - component template creation function\n * @param   {RiotComponentWrapper} componentWrapper - riot compiler generated object\n * @returns {TemplateChunk} template chunk object\n */\n\n\nfunction componentTemplateFactory(template, componentWrapper) {\n  const components = createSubcomponents(componentWrapper.exports ? componentWrapper.exports.components : {});\n  return template(create, expressionTypes, bindingTypes, name => {\n    // improve support for recursive components\n    if (name === componentWrapper.name) return memoizedCreateComponent(componentWrapper); // return the registered components\n\n    return components[name] || COMPONENTS_IMPLEMENTATION_MAP$1.get(name);\n  });\n}\n/**\n * Create a pure component\n * @param   {Function} pureFactoryFunction - pure component factory function\n * @param   {Array} options.slots - component slots\n * @param   {Array} options.attributes - component attributes\n * @param   {Array} options.template - template factory function\n * @param   {Array} options.template - template factory function\n * @param   {any} options.props - initial component properties\n * @returns {Object} pure component object\n */\n\n\nfunction createPureComponent(pureFactoryFunction, _ref) {\n  let {\n    slots,\n    attributes,\n    props,\n    css,\n    template\n  } = _ref;\n  if (template) panic('Pure components can not have html');\n  if (css) panic('Pure components do not have css');\n  const component = defineDefaults(pureFactoryFunction({\n    slots,\n    attributes,\n    props\n  }), PURE_COMPONENT_API);\n  return createCoreAPIMethods(method => function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    // intercept the mount calls to bind the DOM node to the pure object created\n    // see also https://github.com/riot/riot/issues/2806\n    if (method === MOUNT_METHOD_KEY) {\n      const [element] = args; // mark this node as pure element\n\n      defineProperty(element, IS_PURE_SYMBOL, true);\n      bindDOMNodeToComponentObject(element, component);\n    }\n\n    component[method](...args);\n    return component;\n  });\n}\n/**\n * Create the component interface needed for the @riotjs/dom-bindings tag bindings\n * @param   {RiotComponentWrapper} componentWrapper - riot compiler generated object\n * @param   {string} componentWrapper.css - component css\n * @param   {Function} componentWrapper.template - function that will return the dom-bindings template function\n * @param   {Object} componentWrapper.exports - component interface\n * @param   {string} componentWrapper.name - component name\n * @returns {Object} component like interface\n */\n\n\nfunction createComponent(componentWrapper) {\n  const {\n    css,\n    template,\n    exports,\n    name\n  } = componentWrapper;\n  const templateFn = template ? componentTemplateFactory(template, componentWrapper) : MOCKED_TEMPLATE_INTERFACE;\n  return _ref2 => {\n    let {\n      slots,\n      attributes,\n      props\n    } = _ref2;\n    // pure components rendering will be managed by the end user\n    if (exports && exports[IS_PURE_SYMBOL]) return createPureComponent(exports, {\n      slots,\n      attributes,\n      props,\n      css,\n      template\n    });\n    const componentAPI = callOrAssign(exports) || {};\n    const component = defineComponent({\n      css,\n      template: templateFn,\n      componentAPI,\n      name\n    })({\n      slots,\n      attributes,\n      props\n    }); // notice that for the components create via tag binding\n    // we need to invert the mount (state/parentScope) arguments\n    // the template bindings will only forward the parentScope updates\n    // and never deal with the component state\n\n    return {\n      mount(element, parentScope, state) {\n        return component.mount(element, state, parentScope);\n      },\n\n      update(parentScope, state) {\n        return component.update(state, parentScope);\n      },\n\n      unmount(preserveRoot) {\n        return component.unmount(preserveRoot);\n      }\n\n    };\n  };\n}\n/**\n * Component definition function\n * @param   {Object} implementation - the componen implementation will be generated via compiler\n * @param   {Object} component - the component initial properties\n * @returns {Object} a new component implementation object\n */\n\nfunction defineComponent(_ref3) {\n  let {\n    css,\n    template,\n    componentAPI,\n    name\n  } = _ref3;\n  // add the component css into the DOM\n  if (css && name) cssManager.add(name, css);\n  return curry(enhanceComponentAPI)(defineProperties( // set the component defaults without overriding the original component API\n  defineDefaults(componentAPI, Object.assign({}, COMPONENT_LIFECYCLE_METHODS, {\n    [PROPS_KEY]: {},\n    [STATE_KEY]: {}\n  })), Object.assign({\n    // defined during the component creation\n    [SLOTS_KEY]: null,\n    [ROOT_KEY]: null\n  }, COMPONENT_CORE_HELPERS, {\n    name,\n    css,\n    template\n  })));\n}\n/**\n * Create the bindings to update the component attributes\n * @param   {HTMLElement} node - node where we will bind the expressions\n * @param   {Array} attributes - list of attribute bindings\n * @returns {TemplateChunk} - template bindings object\n */\n\nfunction createAttributeBindings(node, attributes) {\n  if (attributes === void 0) {\n    attributes = [];\n  }\n\n  const expressions = attributes.map(a => create$4(node, a));\n  const binding = {};\n  return Object.assign(binding, Object.assign({\n    expressions\n  }, createCoreAPIMethods(method => scope => {\n    expressions.forEach(e => e[method](scope));\n    return binding;\n  })));\n}\n/**\n * Create the subcomponents that can be included inside a tag in runtime\n * @param   {Object} components - components imported in runtime\n * @returns {Object} all the components transformed into Riot.Component factory functions\n */\n\n\nfunction createSubcomponents(components) {\n  if (components === void 0) {\n    components = {};\n  }\n\n  return Object.entries(callOrAssign(components)).reduce((acc, _ref4) => {\n    let [key, value] = _ref4;\n    acc[camelToDashCase(key)] = createComponent(value);\n    return acc;\n  }, {});\n}\n/**\n * Run the component instance through all the plugins set by the user\n * @param   {Object} component - component instance\n * @returns {Object} the component enhanced by the plugins\n */\n\n\nfunction runPlugins(component) {\n  return [...PLUGINS_SET$1].reduce((c, fn) => fn(c) || c, component);\n}\n/**\n * Compute the component current state merging it with its previous state\n * @param   {Object} oldState - previous state object\n * @param   {Object} newState - new state givent to the `update` call\n * @returns {Object} new object state\n */\n\n\nfunction computeState(oldState, newState) {\n  return Object.assign({}, oldState, callOrAssign(newState));\n}\n/**\n * Add eventually the \"is\" attribute to link this DOM node to its css\n * @param {HTMLElement} element - target root node\n * @param {string} name - name of the component mounted\n * @returns {undefined} it's a void function\n */\n\n\nfunction addCssHook(element, name) {\n  if (getName(element) !== name) {\n    set(element, IS_DIRECTIVE, name);\n  }\n}\n/**\n * Component creation factory function that will enhance the user provided API\n * @param   {Object} component - a component implementation previously defined\n * @param   {Array} options.slots - component slots generated via riot compiler\n * @param   {Array} options.attributes - attribute expressions generated via riot compiler\n * @returns {Riot.Component} a riot component instance\n */\n\n\nfunction enhanceComponentAPI(component, _ref5) {\n  let {\n    slots,\n    attributes,\n    props\n  } = _ref5;\n  return autobindMethods(runPlugins(defineProperties(isObject(component) ? Object.create(component) : component, {\n    mount(element, state, parentScope) {\n      if (state === void 0) {\n        state = {};\n      }\n\n      // any element mounted passing through this function can't be a pure component\n      defineProperty(element, IS_PURE_SYMBOL, false);\n      this[PARENT_KEY_SYMBOL] = parentScope;\n      this[ATTRIBUTES_KEY_SYMBOL] = createAttributeBindings(element, attributes).mount(parentScope);\n      defineProperty(this, PROPS_KEY, Object.freeze(Object.assign({}, evaluateInitialProps(element, props), evaluateAttributeExpressions(this[ATTRIBUTES_KEY_SYMBOL].expressions))));\n      this[STATE_KEY] = computeState(this[STATE_KEY], state);\n      this[TEMPLATE_KEY_SYMBOL] = this.template.createDOM(element).clone(); // link this object to the DOM node\n\n      bindDOMNodeToComponentObject(element, this); // add eventually the 'is' attribute\n\n      component.name && addCssHook(element, component.name); // define the root element\n\n      defineProperty(this, ROOT_KEY, element); // define the slots array\n\n      defineProperty(this, SLOTS_KEY, slots); // before mount lifecycle event\n\n      this[ON_BEFORE_MOUNT_KEY](this[PROPS_KEY], this[STATE_KEY]); // mount the template\n\n      this[TEMPLATE_KEY_SYMBOL].mount(element, this, parentScope);\n      this[ON_MOUNTED_KEY](this[PROPS_KEY], this[STATE_KEY]);\n      return this;\n    },\n\n    update(state, parentScope) {\n      if (state === void 0) {\n        state = {};\n      }\n\n      if (parentScope) {\n        this[PARENT_KEY_SYMBOL] = parentScope;\n        this[ATTRIBUTES_KEY_SYMBOL].update(parentScope);\n      }\n\n      const newProps = evaluateAttributeExpressions(this[ATTRIBUTES_KEY_SYMBOL].expressions);\n      if (this[SHOULD_UPDATE_KEY](newProps, this[PROPS_KEY]) === false) return;\n      defineProperty(this, PROPS_KEY, Object.freeze(Object.assign({}, this[PROPS_KEY], newProps)));\n      this[STATE_KEY] = computeState(this[STATE_KEY], state);\n      this[ON_BEFORE_UPDATE_KEY](this[PROPS_KEY], this[STATE_KEY]); // avoiding recursive updates\n      // see also https://github.com/riot/riot/issues/2895\n\n      if (!this[IS_COMPONENT_UPDATING]) {\n        this[IS_COMPONENT_UPDATING] = true;\n        this[TEMPLATE_KEY_SYMBOL].update(this, this[PARENT_KEY_SYMBOL]);\n      }\n\n      this[ON_UPDATED_KEY](this[PROPS_KEY], this[STATE_KEY]);\n      this[IS_COMPONENT_UPDATING] = false;\n      return this;\n    },\n\n    unmount(preserveRoot) {\n      this[ON_BEFORE_UNMOUNT_KEY](this[PROPS_KEY], this[STATE_KEY]);\n      this[ATTRIBUTES_KEY_SYMBOL].unmount(); // if the preserveRoot is null the template html will be left untouched\n      // in that case the DOM cleanup will happen differently from a parent node\n\n      this[TEMPLATE_KEY_SYMBOL].unmount(this, this[PARENT_KEY_SYMBOL], preserveRoot === null ? null : !preserveRoot);\n      this[ON_UNMOUNTED_KEY](this[PROPS_KEY], this[STATE_KEY]);\n      return this;\n    }\n\n  })), Object.keys(component).filter(prop => isFunction(component[prop])));\n}\n/**\n * Component initialization function starting from a DOM node\n * @param   {HTMLElement} element - element to upgrade\n * @param   {Object} initialProps - initial component properties\n * @param   {string} componentName - component id\n * @returns {Object} a new component instance bound to a DOM node\n */\n\nfunction mountComponent(element, initialProps, componentName) {\n  const name = componentName || getName(element);\n  if (!COMPONENTS_IMPLEMENTATION_MAP$1.has(name)) panic(`The component named \"${name}\" was never registered`);\n  const component = COMPONENTS_IMPLEMENTATION_MAP$1.get(name)({\n    props: initialProps\n  });\n  return component.mount(element);\n}\n\n/**\n * Similar to compose but performs from left-to-right function composition.<br/>\n * {@link https://30secondsofcode.org/function#composeright see also}\n * @param   {...[function]} fns) - list of unary function\n * @returns {*} result of the computation\n */\n/**\n * Performs right-to-left function composition.<br/>\n * Use Array.prototype.reduce() to perform right-to-left function composition.<br/>\n * The last (rightmost) function can accept one or more arguments; the remaining functions must be unary.<br/>\n * {@link https://30secondsofcode.org/function#compose original source code}\n * @param   {...[function]} fns) - list of unary function\n * @returns {*} result of the computation\n */\n\nfunction compose() {\n  for (var _len2 = arguments.length, fns = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    fns[_key2] = arguments[_key2];\n  }\n\n  return fns.reduce((f, g) => function () {\n    return f(g(...arguments));\n  });\n}\n\nconst {\n  DOM_COMPONENT_INSTANCE_PROPERTY,\n  COMPONENTS_IMPLEMENTATION_MAP,\n  PLUGINS_SET\n} = globals;\n/**\n * Riot public api\n */\n\n/**\n * Register a custom tag by name\n * @param   {string} name - component name\n * @param   {Object} implementation - tag implementation\n * @returns {Map} map containing all the components implementations\n */\n\nfunction register(name, _ref) {\n  let {\n    css,\n    template,\n    exports\n  } = _ref;\n  if (COMPONENTS_IMPLEMENTATION_MAP.has(name)) panic(`The component \"${name}\" was already registered`);\n  COMPONENTS_IMPLEMENTATION_MAP.set(name, createComponent({\n    name,\n    css,\n    template,\n    exports\n  }));\n  return COMPONENTS_IMPLEMENTATION_MAP;\n}\n/**\n * Unregister a riot web component\n * @param   {string} name - component name\n * @returns {Map} map containing all the components implementations\n */\n\nfunction unregister(name) {\n  if (!COMPONENTS_IMPLEMENTATION_MAP.has(name)) panic(`The component \"${name}\" was never registered`);\n  COMPONENTS_IMPLEMENTATION_MAP.delete(name);\n  cssManager.remove(name);\n  return COMPONENTS_IMPLEMENTATION_MAP;\n}\n/**\n * Mounting function that will work only for the components that were globally registered\n * @param   {string|HTMLElement} selector - query for the selection or a DOM element\n * @param   {Object} initialProps - the initial component properties\n * @param   {string} name - optional component name\n * @returns {Array} list of riot components\n */\n\nfunction mount(selector, initialProps, name) {\n  return $(selector).map(element => mountComponent(element, initialProps, name));\n}\n/**\n * Sweet unmounting helper function for the DOM node mounted manually by the user\n * @param   {string|HTMLElement} selector - query for the selection or a DOM element\n * @param   {boolean|null} keepRootElement - if true keep the root element\n * @returns {Array} list of nodes unmounted\n */\n\nfunction unmount(selector, keepRootElement) {\n  return $(selector).map(element => {\n    if (element[DOM_COMPONENT_INSTANCE_PROPERTY]) {\n      element[DOM_COMPONENT_INSTANCE_PROPERTY].unmount(keepRootElement);\n    }\n\n    return element;\n  });\n}\n/**\n * Define a riot plugin\n * @param   {Function} plugin - function that will receive all the components created\n * @returns {Set} the set containing all the plugins installed\n */\n\nfunction install(plugin) {\n  if (!isFunction(plugin)) panic('Plugins must be of type function');\n  if (PLUGINS_SET.has(plugin)) panic('This plugin was already installed');\n  PLUGINS_SET.add(plugin);\n  return PLUGINS_SET;\n}\n/**\n * Uninstall a riot plugin\n * @param   {Function} plugin - plugin previously installed\n * @returns {Set} the set containing all the plugins installed\n */\n\nfunction uninstall(plugin) {\n  if (!PLUGINS_SET.has(plugin)) panic('This plugin was never installed');\n  PLUGINS_SET.delete(plugin);\n  return PLUGINS_SET;\n}\n/**\n * Helper method to create component without relying on the registered ones\n * @param   {Object} implementation - component implementation\n * @returns {Function} function that will allow you to mount a riot component on a DOM node\n */\n\nfunction component(implementation) {\n  return function (el, props, _temp) {\n    let {\n      slots,\n      attributes,\n      parentScope\n    } = _temp === void 0 ? {} : _temp;\n    return compose(c => c.mount(el, parentScope), c => c({\n      props,\n      slots,\n      attributes\n    }), createComponent)(implementation);\n  };\n}\n/**\n * Lift a riot component Interface into a pure riot object\n * @param   {Function} func - RiotPureComponent factory function\n * @returns {Function} the lifted original function received as argument\n */\n\nfunction pure(func) {\n  if (!isFunction(func)) panic('riot.pure accepts only arguments of type \"function\"');\n  func[IS_PURE_SYMBOL] = true;\n  return func;\n}\n/**\n * no-op function needed to add the proper types to your component via typescript\n * @param {Function|Object} component - component default export\n * @returns {Function|Object} returns exactly what it has received\n */\n\nconst withTypes = component => component;\n/** @type {string} current riot version */\n\nconst version = 'v6.0.2'; // expose some internal stuff that might be used from external tools\n\nconst __ = {\n  cssManager,\n  DOMBindings,\n  createComponent,\n  defineComponent,\n  globals\n};\n\nexport { __, component, install, mount, pure, register, uninstall, unmount, unregister, version, withTypes };\n","var map = {\n\t\"./my-component/my-component.riot\": 607,\n\t\"./sidebar/sidebar.riot\": 576\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 329;","import { register } from 'riot'\n\nconst basename = (path, extension = '') => path.split('/').reverse()[0].replace(extension, '')\nconst globalComponentsContext = require.context('./components/global/', true, /[a-zA-Z0-9-]+\\.riot/)\n\nexport default () => {\n  globalComponentsContext.keys().map(path => {\n    const name = basename(path, '.riot')\n\n    const component = globalComponentsContext(path)\n\n    register(name, component.default || component)\n\n    return {\n      name,\n      component\n    }\n  })\n}\n","import './style.css'\nimport 'tachyons'\nimport '@riotjs/hot-reload'\nimport { mount } from 'riot'\nimport registerGlobalComponents from './register-global-components'\n\n// register\nregisterGlobalComponents()\n\n// mount all the global components found in this page\nmount('[data-riot-component]')\n"],"names":["exports","riot","$","_interopDefaultLegacy","e","$__default","cssManager","__","DOM_COMPONENT_INSTANCE_PROPERTY","globals","reload","componentAPI","name","map","el","oldTag","unmount","remove","newTag","component","props","update","state","console","warn","default","Object","defineProperty","value","factory","message","components","User","showUser","toggleUser","this","selector","ctx","els","document","querySelectorAll","Array","isArray","test","prototype","toString","call","length","from","normalizeUrl","srcByModuleId","create","noDocument","forEach","noop","updateCss","url","href","split","isUrlRequest","isLoaded","indexOf","visited","newEl","cloneNode","addEventListener","parentNode","removeChild","concat","Date","now","nextSibling","insertBefore","appendChild","reloadAll","elements","module","moduleId","options","log","fn","timeout","getScriptSrc","src","currentScript","scripts","getElementsByTagName","lastScriptTag","fileMap","splitResult","filename","mapRule","reg","RegExp","replace","getCurrentScriptUrl","reloaded","loaded","ret","stripWWW","some","getReloadUrl","reloadStyle","locals","join","self","args","arguments","functionCall","apply","clearTimeout","setTimeout","urlString","trim","protocol","host","toLowerCase","reduce","accumulator","item","pop","push","cssReload","id","hot","dispose","accept","undefined","dashToCamelCase","string","_","c","toUpperCase","moveChildren","source","target","firstChild","cleanNode","node","clearChildren","childNodes","children","newNode","refNode","COMPONENTS_IMPLEMENTATION_MAP$1","Map","DOM_COMPONENT_INSTANCE_PROPERTY$1","Symbol","PLUGINS_SET$1","Set","IS_DIRECTIVE","MOUNT_METHOD_KEY","UPDATE_METHOD_KEY","UNMOUNT_METHOD_KEY","SHOULD_UPDATE_KEY","ON_BEFORE_MOUNT_KEY","ON_MOUNTED_KEY","ON_BEFORE_UPDATE_KEY","ON_UPDATED_KEY","ON_BEFORE_UNMOUNT_KEY","ON_UNMOUNTED_KEY","PROPS_KEY","STATE_KEY","SLOTS_KEY","ROOT_KEY","IS_PURE_SYMBOL","IS_COMPONENT_UPDATING","PARENT_KEY_SYMBOL","ATTRIBUTES_KEY_SYMBOL","TEMPLATE_KEY_SYMBOL","freeze","__proto__","COMPONENTS_IMPLEMENTATION_MAP","PLUGINS_SET","VALUE_ATTRIBUTE","bindingTypes","EACH","IF","SIMPLE","TAG","SLOT","expressionTypes","ATTRIBUTE","EVENT","TEXT","VALUE","HEAD_SYMBOL","TAIL_SYMBOL","key","assign","enumerable","writable","configurable","defineProperties","properties","entries","_ref","defineDefaults","defaults","_ref2","getFragmentChildren","head","tail","nodes","walkNodes","n","check","isFilterActive","checkType","element","type","isSvg","owner","ownerSVGElement","isTemplate","tagName","isFunction","isObject","isNil","constructor","UNMOUNT_SCOPE","EachBinding","mount","scope","parentScope","placeholder","childrenMap","collection","evaluate","items","newChildrenMap","batches","futureNodes","binding","condition","template","itemName","getKey","indexName","root","isTemplateTag","index","context","extendScope","oldItem","get","mustFilterItem","mustMount","componentTemplate","clone","meta","fragment","dom","createTextNode","createHeadTailPlaceholders","avoidDOMInjection","createTemplateMeta","delete","set","createPatch","a","b","before","bLength","aEnd","bEnd","aStart","bStart","has","i","sequence","replaced","replaceChild","udomdiff","redundant","info","patch","values","first","last","markEdgeNodes","IfBinding","mustUnmount","pristine","panic","Error","memoize","cache","cached","val","evaluateAttributeExpressions","attributes","acc","attribute","ElementProto","Element","isNativeHtmlProperty","hasOwnProperty","RE_EVENTS_PREFIX","EventListener","handleEvent","event","ListenersWeakMap","WeakMap","normalizeStringValue","getTextNode","childNodeIndex","nodeType","Node","COMMENT_NODE","textNode","expressions","attributeExpression","oldValue","newAttributes","oldAttributes","newKeys","keys","filter","includes","removeAttribute","removeAllAttributes","setAllAttributes","isBoolean","shouldRemoveAttribute","canRenderAttribute","setAttribute","normalizeValue","normalizedEventName","eventListener","listener","createListener","callback","getCallbackAndOptions","handler","mustAddEvent","removeEventListener","data","expression","Expression","create$4","getRealParent","SlotBinding","getTemplateScope","attr","extendParentScope","templateData","slots","find","realParent","html","bindings","createDOM","moveSlotInnerContent","mustRemoveRoot","slot","child","slotBindings","TagBinding","tag","slotsToMarkup","getTag","getComponent","keepRootTag","method","fixTextExpressionsOffset","textExpressionsOffset","create$1","templateTagOffset","redundantAttribute","querySelector","bindingExpressions","injectDOM","TemplateChunk","container","ownerDocument","importNode","window","DOMParser","parseFromString","documentElement","createSVGTree","createElement","innerHTML","content","createHTMLTree","createDOMTree","createTemplateDOM","createDocumentFragment","siblings","Math","max","getTemplateTagOffset","bindingsData","DOMBindings","createBinding","createExpression","callOrAssign","domToArray","normalize","attrs","prop","CSS_BY_NAME","style","add","css","inject","curry","_len","_key","_len2","_key2","getName","names","parseNodes","COMPONENT_CORE_HELPERS","$$","PURE_COMPONENT_API","COMPONENT_LIFECYCLE_METHODS","MOCKED_TEMPLATE_INTERFACE","memoizedCreateComponent","createComponent","bindDOMNodeToComponentObject","createCoreAPIMethods","mapFunction","componentWrapper","templateFn","_ref4","createSubcomponents","componentTemplateFactory","pureFactoryFunction","createPureComponent","defineComponent","preserveRoot","_ref3","enhanceComponentAPI","computeState","oldState","newState","_ref5","runPlugins","createAttributeBindings","initialProps","DOMattributesToObject","evaluateInitialProps","addCssHook","newProps","bind","register","unregister","componentName","mountComponent","keepRootElement","install","plugin","uninstall","implementation","_temp","fns","f","g","compose","pure","func","withTypes","version","webpackContext","req","webpackContextResolve","__webpack_require__","o","code","resolve","globalComponentsContext","path","extension","reverse","basename"],"sourceRoot":""}